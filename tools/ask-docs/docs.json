[
  {
    "id": "7aff348b73b143966424bb5972798ac4",
    "title": "Get Started",
    "description": "How to get started with the theme.",
    "lastCommit": "2023-11-27 13:39:31 -0500 EST",
    "version": "latest",
    "section": "get-started",
    "parent": "Milo Theme Docs",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/get-started/",
    "relURI": "/get-started/",
    "body": " Before You Start # This section assumes that you have experience with terminals, CLIs, and IDEs (e.g., VS Code) You should ideally have a git tool (e.g., GitHub) to store and manage your site repo Why use Hugo? # Affordable: Technical Writers usually have a razor-thin budget; you can deploy docs with Hugo + Netlify (or Render, Vercel) for free in most cases (Startup, Open Source) Scalable: Hugo is the fastest SSG, supports localization, is un-opinionated in terms of style, and is easy to evolve alongside your product Ergonomic: The drafting UX is markdown focused with near-instant local previews; for non-tehchnical contributors, you can plug into CMS interfaces (e.g., Frontmatter) Agnostic: You\u0026rsquo;ll always own your docs, and transforming content into JSON or XML is as easy as defining an output template (great for search tools like Algolia!) Why use This Theme? # No Manual Menus: All sections are auto-sorted based on either a weight value or a-z title order Deep Section Nesting: Tech docs tend to need sub-sub-sub sections, y\u0026rsquo;know? Discovery UX Components: Algolia Search \u0026amp; ChatGPT UIs are OOTB for easy hookup Battle Tested Shortcodes: I\u0026rsquo;ve been deploying Hugo for tech docs for 5+ years; this is my personal collection of need-to-haves, made as agnostically as possible TailwindCSS + VanillaJS: You\u0026rsquo;ll be able to modify this theme to your liking using the basics with minimal dependencies Brandable: Colors and fonts have their own CSS files; the TailwindCSS extensions mapped to these styles use generic names like font-brand, font-semibold, and brand-color-1. ",
    "tags": []
  },
  {
    "id": "50f322833d7a1a47bf8d404e6ccc5629",
    "title": "Quickstart",
    "description": "Use a quick deploy script to get started.",
    "lastCommit": "2023-11-26 23:43:29 -0500 EST",
    "version": "latest",
    "section": "get-started",
    "parent": "Get Started",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/get-started/quickstart/",
    "relURI": "/get-started/quickstart/",
    "body": " MacOS # The following script will update Hugo if you already have it installed via brew. Open your terminal. Copy and paste the following: brew install hugo site_name=\u0026#34;milodocs_$(date +%s%N | md5sum | head -c 8)\u0026#34; hugo new site \u0026#34;$site_name\u0026#34; cd \u0026#34;$site_name\u0026#34; git clone https://github.com/lbliii/milodocs themes/milodocs echo \u0026#39;theme = \u0026#34;milodocs\u0026#34;\u0026#39; \u0026gt;\u0026gt; hugo.toml git init git add . git commit -m \u0026#34;Initial commit\u0026#34; hugo server -D -p 1313 Copy Open localhost:1313. ",
    "tags": []
  },
  {
    "id": "bc416edc6fcbea912aee77da48a994cd",
    "title": "Install",
    "description": "Learn how to install Hugo and the theme.",
    "lastCommit": "2023-11-26 23:43:29 -0500 EST",
    "version": "latest",
    "section": "get-started",
    "parent": "Get Started",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/get-started/install/",
    "relURI": "/get-started/install/",
    "body": "Getting from 0 to 1 takes ~5 minutes.\n1. Install Hugo # brew install hugo Copy See Hugo Docs for more options:\nMacOS Linux Windows 2. Create a New Site # hugo new site \u0026lt;siteName\u0026gt; Copy 3. Install This Project # Open your \u0026lt;siteName\u0026gt; project directory.\nNavigate to the themes/ directory.\nRun the following command:\ngh repo clone lbliii/milodocs Copy submodule sandboxYou can install this theme as a submodule, however the default content files will not be removable. I may separate these in the future depending on what people would like. 4. Add Theme to Config # baseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;milodocs\u0026#39; Copy 5. Init Repo # Time to start saving your progress!\nRun the following: git init Copy Add a comment. Push your new site and theme to your remote git repo. 6. Deploy locally # Navigate into the siteName repo. Run the following: hugo server Copy Open localhost (typically localhost:1313). yay! you did it!You\u0026rsquo;ve done the hardest part: installing and deploying Hugo with a theme. See the next page to learn how to clear out my default content and start drafting. ",
    "tags": []
  },
  {
    "id": "d5a13568ebf344cd3bb897042d6cba9b",
    "title": "Clear Content",
    "description": "Learn how to clear out the default content and start fresh.",
    "lastCommit": "2023-11-26 16:43:02 -0500 EST",
    "version": "latest",
    "section": "get-started",
    "parent": "Get Started",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/get-started/clear/",
    "relURI": "/get-started/clear/",
    "body": "By default, content stored in the theme\u0026rsquo;s content directory (themes/milo/content/) is served alongside content stored in the site\u0026rsquo;s content directory (content/). You\u0026rsquo;re going to want to clear that out once you\u0026rsquo;re ready to write your own docs.\nTest Feature ConfigThe default documentation is great for testing out different feature configs, such as:\ndisabling next/prev changing truncation values updating the number of child articles to displayed in a tile. Before You Start # You should have completed the install steps. How to Clear out Default content # Open your siteName repo. Navigate to themes/milo. Delete the content/ directory. That\u0026rsquo;s it! Now start drafting in your top-level content/ directory.\n",
    "tags": []
  },
  {
    "id": "703d1a12cf0d6694b1bc6f84bd87319e",
    "title": "Configure",
    "description": "Learn how to configure the basics (site URL and metadata).",
    "lastCommit": "2024-04-15 11:37:35 -0400 EDT",
    "version": "latest",
    "section": "get-started",
    "parent": "Get Started",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/get-started/configure/",
    "relURI": "/get-started/configure/",
    "body": "After you have locally installed Hugo and deployed a copy of this theme, you can start configuring your site. This guide will walk you through the basics of configuring your site, including setting the site URL and metadata.\nHow to Configure Your Site # 1. Update Site Details # Open the config/_default/hugo.yaml file in your code editor. Update the baseURL with the URL of your site. Update the title. baseURL: \u0026#34;https://example.com\u0026#34; title: \u0026#34;My Hugo Site\u0026#34; Copy 2. Update Theme Variables # Update Organization and Product Details # Open the config/_default/params.yaml file in your code editor. Update the organization to reflect your organization\u0026rsquo;s name. Update the product to reflect your product\u0026rsquo;s name. Update Feature Settings # This is optional, but you can update the features section to enable or disable certain features.\nnames: organization: \u0026#39;Emdash\u0026#39; product: \u0026#39;MiloDocs\u0026#39; version: major: 0 minor: 0 patch: 3 article: childArticles: display: true count: 7 titleTrunc: 90 descTrunc: 90 nextPrev: display: true trunc: 35 chat: display: true toc: display: true Copy ",
    "tags": []
  },
  {
    "id": "93f46d64350f434384f293fbe9a95ea0",
    "title": "Features",
    "description": "Learn how to use the features of the theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Milo Theme Docs",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/features/",
    "relURI": "/features/",
    "body": "",
    "tags": []
  },
  {
    "id": "6523de3c51dadb10edb8de68c8d6dc1a",
    "title": "Glossary",
    "description": "View the Example Glossary",
    "lastCommit": "2023-11-26 19:52:26 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Features",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/features/glossary/",
    "relURI": "/features/glossary/",
    "body": "",
    "tags": []
  },
  {
    "id": "ba0fad12a41f6fbfdbc3d6daa87fd4da",
    "title": "Apple",
    "description": "Learn about Apples",
    "lastCommit": "2023-11-26 19:52:26 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Glossary",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/features/glossary/apple/",
    "relURI": "/features/glossary/apple/",
    "body": "Quisque consequat consectetur quam at consequat. Integer efficitur quam id eros auctor, et malesuada justo congue. Fusce non feugiat tellus. Proin a eros in dolor bibendum malesuada ut et elit. Sed sollicitudin, ipsum et fermentum facilisis, urna nisl vehicula neque, in malesuada dolor orci et dolor. Etiam in libero ut turpis cursus tincidunt. Integer in libero non ante laoreet vestibulum in sed orci. Vivamus luctus bibendum velit, at egestas justo fermentum in.\n",
    "tags": []
  },
  {
    "id": "cd1acc16dc015b108357a5418aa8d38f",
    "title": "Banana",
    "description": "Learn about Bananas",
    "lastCommit": "2023-11-26 19:52:26 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Glossary",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/features/glossary/banana/",
    "relURI": "/features/glossary/banana/",
    "body": "Quisque consequat consectetur quam at consequat. Integer efficitur quam id eros auctor, et malesuada justo congue. Fusce non feugiat tellus. Proin a eros in dolor bibendum malesuada ut et elit. Sed sollicitudin, ipsum et fermentum facilisis, urna nisl vehicula neque, in malesuada dolor orci et dolor. Etiam in libero ut turpis cursus tincidunt. Integer in libero non ante laoreet vestibulum in sed orci. Vivamus luctus bibendum velit, at egestas justo fermentum in.\n",
    "tags": []
  },
  {
    "id": "b6d0733b2598b77275312c768e93e026",
    "title": "Chocolate",
    "description": "Learn about Chocolate",
    "lastCommit": "2023-11-26 19:52:26 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Glossary",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/features/glossary/chocolate/",
    "relURI": "/features/glossary/chocolate/",
    "body": "Quisque consequat consectetur quam at consequat. Integer efficitur quam id eros auctor, et malesuada justo congue. Fusce non feugiat tellus. Proin a eros in dolor bibendum malesuada ut et elit. Sed sollicitudin, ipsum et fermentum facilisis, urna nisl vehicula neque, in malesuada dolor orci et dolor. Etiam in libero ut turpis cursus tincidunt. Integer in libero non ante laoreet vestibulum in sed orci. Vivamus luctus bibendum velit, at egestas justo fermentum in.\n",
    "tags": []
  },
  {
    "id": "28fbf3a2d16ddf671a80cd0fb7fb37eb",
    "title": "Dates",
    "description": "Learn about Dates",
    "lastCommit": "2023-11-26 19:52:26 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Glossary",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/features/glossary/dates/",
    "relURI": "/features/glossary/dates/",
    "body": "Quisque consequat consectetur quam at consequat. Integer efficitur quam id eros auctor, et malesuada justo congue. Fusce non feugiat tellus. Proin a eros in dolor bibendum malesuada ut et elit. Sed sollicitudin, ipsum et fermentum facilisis, urna nisl vehicula neque, in malesuada dolor orci et dolor. Etiam in libero ut turpis cursus tincidunt. Integer in libero non ante laoreet vestibulum in sed orci. Vivamus luctus bibendum velit, at egestas justo fermentum in.\n",
    "tags": []
  },
  {
    "id": "ee129d5289d8637274b8e3c0aec1335a",
    "title": "Eggs",
    "description": "Learn about Eggs",
    "lastCommit": "2023-11-26 19:52:26 -0500 EST",
    "version": "latest",
    "section": "features",
    "parent": "Glossary",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/features/glossary/eggs/",
    "relURI": "/features/glossary/eggs/",
    "body": "Quisque consequat consectetur quam at consequat. Integer efficitur quam id eros auctor, et malesuada justo congue. Fusce non feugiat tellus. Proin a eros in dolor bibendum malesuada ut et elit. Sed sollicitudin, ipsum et fermentum facilisis, urna nisl vehicula neque, in malesuada dolor orci et dolor. Etiam in libero ut turpis cursus tincidunt. Integer in libero non ante laoreet vestibulum in sed orci. Vivamus luctus bibendum velit, at egestas justo fermentum in.\n",
    "tags": []
  },
  {
    "id": "bb1aabf99fc9a0c8a258abb8b2a93fd7",
    "title": "Makefile",
    "description": "learn how to use the Makefile commands for this Hugo theme.",
    "lastCommit": "2024-04-07 13:24:01 -0400 EDT",
    "version": "latest",
    "section": "features",
    "parent": "Features",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/features/makefile/",
    "relURI": "/features/makefile/",
    "body": "Makefiles are a great way to automate repetitive tasks. This theme comes with a Makefile that has a few commands to help you build documentation or reference assets for various scenarios. It is a great way to keep your project organized and to help you remember the commands you need to run to build your project \u0026mdash; especially if you begin to rely on scripts to generate parts of your documentation.\nHow it Works # To execute a make command, you need to open a terminal and navigate to the root of your project. From there, you can run the following commands:\nmake \u0026lt;command\u0026gt;\nUse Cases # Generate REST API Docs # If you are supporting a project that has a REST API documented using an OpenAPI 3.0 specification, you can use the Makefile to generate documentation native to this theme.\nTo generate the REST API documentation, you can run the following commands:\nmake api-gen \u0026lt;INPUT.YAML\u0026gt; \u0026lt;OUTPUT.JSON\u0026gt;: This command generates the REST API documentation This command runs your OpenAPI 3.0 specification through the tools/spec-preprocessor.py script to generate a JSON file that resolves all of the component references in your specification. This JSON file can then be referenced in a page to be rendered as a REST API documentation page.\n--- title: Example API (TESTING) layout: api reference: \u0026#34;\u0026lt;NAME_OF_FILE\u0026gt;\u0026#34; # /data --- Copy Build Offline Docs # If you are supporting a project that customers may need to access offline in an air-gapped environment, you can build your documentation into a file:// protocol-compatible format that is tarred and zipped for easy distribution.\nYour developer colleagues can utilize this make target by adding it into their build process to ensure that the documentation is delivered with the product.\nTo build the offline documentation, you can run the following commands:\nmake offline: This command builds the offline documentation as a .tar.gz file make offline-drafts: This command builds the offline documentation with drafts as a .tar.gz file Source Code # # Makefile to start the Hugo server with specific product versions # Default action if no product is specified docs all: @echo \u0026#34;Starting Hugo server for all docs\u0026#34; @hugo server # Target for generating the OpenAPI spec for the API reference api-gen: python tools/spec-preprocessor.py $(INPUT) $(OUTPUT) api-gen-test: python tools/spec-preprocessor.py data/basicApi.yaml data/basicApi-output.json # Target for building the site for offline use with drafts offline-drafts: @echo \u0026#34;Building Hugo site for offline use with drafts\u0026#34; @hugo -D --environment development --config config/hugo-offline.yaml --minify @tar -czvf offline-docs.tar.gz ./public @echo \u0026#34;Site packaged into offline-docs.tar.gz (including drafts)\u0026#34; # Target for building the site for offline use without drafts offline: @echo \u0026#34;Building Hugo site for offline use\u0026#34; @hugo --environment development --config config/hugo-offline.yaml --minify @tar -czvf offline-docs.tar.gz ./public @echo \u0026#34;Site packaged into offline-docs.tar.gz\u0026#34; # Target for updating the release frontmatter for a given product vdir; also updates the supported release table csv ## # Usage: make update-frontmatter P=\u0026lt;product_name\u0026gt; VDIR=\u0026lt;version_dir\u0026gt; V=\u0026lt;new_version_number\u0026gt; v-bump: @python tools/update-prod-release-frontmatter.py $(P) $(VDIR) $(V) @python tools/update-supported-release-table.py $(P) $(V) Copy ",
    "tags": []
  },
  {
    "id": "be8ec78af1ceb94560f6fb17d4ec6af9",
    "title": "Guides",
    "description": "Follow Hugo and theme-specific setup guides.",
    "lastCommit": "2024-04-17 08:14:51 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Milo Theme Docs",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/guides/",
    "relURI": "/guides/",
    "body": "",
    "tags": []
  },
  {
    "id": "c718578fbfa6e8cf453e008dbdefddbd",
    "title": "Alternative Markups",
    "description": "learn how to support alternative markups in Hugo.",
    "lastCommit": "2024-04-16 22:44:45 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Guides",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/guides/markups/",
    "relURI": "/guides/markups/",
    "body": "Sometimes you need to support additional markups that work better for your team/project. The guides in this section will walk you through how to configure a Hugo site to support either rendering a whole file (e.g., my-file.rst) or inline content wrapped in a shortcode.\nYour site builds may take longer if you are rendering a lot of alternative markup content. This is due to Hugo needing to execute additional helper tools for parsing non-markdown content. Test this at scale before committing to use. ",
    "tags": []
  },
  {
    "id": "46fb45299a4df683458c70e86b40aa44",
    "title": "Enable AsciiDoc",
    "description": "learn how to enable AsciiDoc Markup in your Hugo docs site.",
    "lastCommit": "2024-04-17 09:20:17 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Alternative Markups",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/guides/markups/ascii/",
    "relURI": "/guides/markups/ascii/",
    "body": "To utilize AsciiDoc markup in a Hugo site, some extra configuration is required \u0026mdash; both on your local machine and in your deployment solution (Netlify, AWS Amplify, a container image).\nOnce set up, you will be able to use the ascii shortcode and/or create your own.\nBefore You Start # Read about Hugo\u0026rsquo;s security model Read about Hugo\u0026rsquo;s AsciiDoc configuration options How to Enable AsciiDoc Markup # The following steps have been tested with Netlify. By providing a Gemfile at the root level, Netlify knows to automatically install both Ruby and the required gems listed in the Gemfile. This may not be the case in your deployment solution. Install # Install Ruby. brew install rbenv ruby-build Copy Install asciidoctor. brew install asciidoctor Copy Create a Gemfile at the root of your Hugo project and add the following: source \u0026#39;https://rubygems.org\u0026#39; gem \u0026#39;asciidoctor\u0026#39; Copy Open your Hugo security configuration (e.g. config/_default/security.yaml). Update security.exec: We need to whitelist the ascii processor tool, asciidoctor. We need to whitelist the GEM_PATH. exec: allow: - \u0026#39;^dart-sass-embedded$\u0026#39; - \u0026#39;^go$\u0026#39; - \u0026#39;^npx$\u0026#39; - \u0026#39;^postcss$\u0026#39; - \u0026#39;^rst2html.py$\u0026#39; - \u0026#39;^rst2html$\u0026#39; - \u0026#39;^asciidoctor$\u0026#39; osEnv: - (?i)^(PATH|PATHEXT|APPDATA|TMP|TEMP|TERM|HOME|GEM_PATH)$ Copy Configure # You can use basic AsciiDoc markup without any additional configuration. However, you can customize and extend the support by adding extensions and updating the optional attributes.\nOpen your Hugo markup configuration (e.g. config/_default/markup.yaml). Add the following attributes: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true preserveTOC: false safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: true Copy Update the list of extensions you\u0026rsquo;d like to support. Troubleshooting # It\u0026rsquo;s possible that whitelisting GEM_PATH does not work for you. In that case, try to whitelist GEM_HOME or RVM_*. See this related Github issue for historical context.\n",
    "tags": []
  },
  {
    "id": "34f6a6a75145425d82470159ed0e4449",
    "title": "Enable RST",
    "description": "learn how to enable reStructuredText (RST) Markup in your Hugo docs site.",
    "lastCommit": "2024-04-17 08:37:26 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Alternative Markups",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/guides/markups/rst/",
    "relURI": "/guides/markups/rst/",
    "body": "To utilize reStructuredText (RST) markup in a Hugo site, some extra configuration is required \u0026mdash; both on your local machine and in your deployment solution (Netlify, AWS Amplify, a container image).\nOnce set up, you will be able to use full .rst pages, write inline RST using the rst shortcode, and/or create your own markup shortcodes.\nBefore You Start # Read about Hugo\u0026rsquo;s security model Read about Hugo\u0026rsquo;s AsciiDoc configuration options How to Enable RST Markup # The following steps have been tested with Netlify. By providing a requirements.txt file at the root level, Netlify knows to automatically install python, pip, and the listed dependencies (rst2html). This may not be the case in your deployment solution. Install Python.\nInstall rst2html.\npip install rst2html Copy Create a requirements.txt file at the root of your Hugo project and add the following:\nrst2html Copy Update your Hugo configuration values at security.exec.allow. We need to whitelist the RST processor tool as rst2html and rst2html.py.\nexec: allow: - \u0026#39;^dart-sass-embedded$\u0026#39; - \u0026#39;^go$\u0026#39; - \u0026#39;^npx$\u0026#39; - \u0026#39;^postcss$\u0026#39; - \u0026#39;^rst2html.py$\u0026#39; - \u0026#39;^rst2html$\u0026#39; - \u0026#39;^asciidoctor$\u0026#39; Copy ",
    "tags": []
  },
  {
    "id": "ff1c3958e2d18f04a3fca0b1ba67507f",
    "title": "Theme Building",
    "description": "learn how to build Hugo themes \u0026 theme components",
    "lastCommit": "2024-04-17 08:37:26 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Guides",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/guides/themes/",
    "relURI": "/guides/themes/",
    "body": "",
    "tags": []
  },
  {
    "id": "f104d1404c5a4d4fa29d6d612d529d0a",
    "title": "Add TailwindCSS",
    "description": "learn how to add TailwindCSS to your Hugo Theme",
    "lastCommit": "2024-04-17 08:37:26 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Theme Building",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/guides/themes/tailwind/",
    "relURI": "/guides/themes/tailwind/",
    "body": "You can utilize TailwindCSS to build your site layouts. This is advantageous because TailwindCSS is a mature CSS framework that is well supported and known by most developers, making onboarding other people to your project much easier.\nBefore You Start # Read the TailwindCSS official install guide Read the Hugo new theme CLI command reference How to Add TailwindCSS to a Hugo Theme # Open a terminal and run the following: hugo new site $siteName cd $siteName hugo new theme $siteNameTheme git init cd themes/$siteNameTheme pnpm init pnpm install tailwindcss Copy Open tailwind.config.js and update the content: attribute to include the content/ \u0026amp; layouts/ directories: // tailwind.config.js /** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ module.exports = { content: [\u0026#34;content/**/*.md\u0026#34;, \u0026#34;layouts/**/*.html\u0026#34;], theme: { extend: {}, }, plugins: [], }; Copy Navigate to /themes/sitethemeName/assets/css. Add a src/input.css with the following: @tailwind base; @tailwind components; @tailwind utilities; Copy Update package.json with the following scripts: \u0026#34;build-tw\u0026#34;: \u0026#34;pnpm tailwindcss -i ./assets/css/src/input.css -o ./assets/css/main.css\u0026#34;, \u0026#34;watch-tw\u0026#34;: \u0026#34;pnpm tailwindcss -i ./assets/css/src/input.css -o ./assets/css/main.css -w --minify\u0026#34; Copy Run pnpm run watch-tw from themes/siteThemeName directory to enable watching for design changes. You are ready to start creating and editing your theme.\n",
    "tags": []
  },
  {
    "id": "c13bb0f3955f9af19dd85831d5db637e",
    "title": "Output Formats",
    "description": "learn how to create custom output formats for your Hugo site.",
    "lastCommit": "2024-04-17 10:57:58 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Theme Building",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/guides/themes/output-formats/",
    "relURI": "/guides/themes/output-formats/",
    "body": "Hugo supports various output formats that it makes available in the public/ folder after building your site. These can be used by robots, humans, or other systems to consume your content in different ways.\n",
    "tags": []
  },
  {
    "id": "0daf564a3ebba40da7fcabe2cc081586",
    "title": "JSON Objects",
    "description": "Learn how to convert your articles into JSON objects.",
    "lastCommit": "2024-04-17 11:00:07 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Output Formats",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/guides/themes/output-formats/json/",
    "relURI": "/guides/themes/output-formats/json/",
    "body": "You can convert your articles into JSON objects by creating a series of JSON templates in your theme that include the front matter and content of your articles. These templates can adhere to any JSON schema you choose.\nThe JSON output format is extremely advantageous for documentation site use cases because it can be used to build search indexes, chatbots, and other applications that require structured data.\nBefore You Start # Review the Page Kinds Hugo Documentation Review the Front Matter Hugo Documentation Review the Page Methods Hugo Documentation How to Create JSON Output # Create json.json Partial # This template acts as the core of your JSON Schema definition. It will be used across all of the other page kind layouts we\u0026rsquo;ll build (single.json, section.json, list.json, home.json).\nNavigate to your theme\u0026rsquo;s layouts/partials directory.\nCreate a new file called json.json.\nDefine the schema you want. Here is an example:\n{ \u0026#34;id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;draft\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hidden\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;lastCommit\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;section\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;pageKind\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;permalink\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;relPermalink\u0026#34;: \u0026#34;\u0026#34; } Copy Add the golang template logic to each attribute. This will require you to use a series of page methods. If you\u0026rsquo;d like to use a custom front matter attribute, such as a cascaded version number from a parent directory\u0026rsquo;s _index.md, remember to use the .Params method to access it.\n{ \u0026#34;id\u0026#34;: \u0026#34;{{ .File.UniqueID }}\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;{{.Params.version}}\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;{{ .Title }}\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;{{ .Description }}\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;{{ .Date }}\u0026#34;, \u0026#34;draft\u0026#34;: {{ .Draft }}, \u0026#34;hidden\u0026#34;: {{ .Hidden }}, \u0026#34;lastCommit\u0026#34;: \u0026#34;{{ .GitInfo.AuthorDate }}\u0026#34;, \u0026#34;section\u0026#34;: \u0026#34;{{ .Section }}\u0026#34;, \u0026#34;parent\u0026#34;: \u0026#34;{{ .Parent }}\u0026#34;, \u0026#34;pageKind\u0026#34;: \u0026#34;{{ .Type }}\u0026#34;, \u0026#34;bundleType\u0026#34;: \u0026#34;{{ .BundleType }}\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;{{ .Content }}\u0026#34;, \u0026#34;permalink\u0026#34;: \u0026#34;{{ .Permalink }}\u0026#34;, \u0026#34;relPermalink\u0026#34;: \u0026#34;{{ .RelPermalink }}\u0026#34;, } Copy You can conditionally include or exclude certain attributes. For example, you can exclude the hidden attribute if it is not set in the front matter.\n{{- with .Page.Params.hidden -}}\u0026#34;hidden\u0026#34;: {{- . -}},{{- end -}} Copy Save the file.\nCreate Default Layouts # single.json # This template will be used to render the JSON object for the single page kind.\nNavigate to your theme\u0026rsquo;s layouts/_default directory. Create a new file called single.json. Add the following code: {{- partial \u0026#34;json.json\u0026#34; . -}} Copy Save the file. section.json # This template will be used to render the JSON object for the section page kind.\nNavigate to your theme\u0026rsquo;s layouts/_default directory. Create a new file called section.json. Add the following code: [ {{- range $index, $page := .Pages }} {{- if ne $page.Type \u0026#34;json\u0026#34; }} {{- if and $index (gt $index 0) }},{{ end }} {{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34;}} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} ] {{- define \u0026#34;section\u0026#34; }} {{- range .Pages }} {{- if ne .Type \u0026#34;json\u0026#34; }} ,{{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34;}} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} {{- end }} Copy There may be a more elegant way to define this template, but this one does work. If you come up with a better one please share! Save the file. list.json # This template will be used to render the JSON object for the list page kind.\nNavigate to your theme\u0026rsquo;s layouts/_default directory. Create a new file called list.json. Add the following code: {{- partial \u0026#34;json.json\u0026#34; . -}} Copy Save the file. home.json # This template will be used to render the JSON object for the home page kind.\nNavigate to your theme\u0026rsquo;s layouts/_default directory. Create a new file called home.json. Add the following code: [ {{- range $index, $page := .Pages }} {{- if ne $page.Type \u0026#34;json\u0026#34; }} {{- if and $index (gt $index 0) }},{{- end }} {{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34; }} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} ] {{- define \u0026#34;section\u0026#34; }} {{- range .Pages }} {{- if ne .Type \u0026#34;json\u0026#34; }} ,{{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34;}} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} {{- end }} Copy Save the file. Update Hugo Configuration # Open your Hugo outputs configuration (e.g., config/_default/outputs.yaml). Update each page kind to include JSON in the supported array. home: [ \u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] page: [ \u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] section: [ \u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] list: [ \u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Copy Save the file. Test # Run hugo server in your project directory. Navigate to your site\u0026rsquo;s homepage and append /index.json to the URL. You should see a JSON index of all of your site\u0026rsquo;s pages. You can append /index.json to any url whose page is built using these supported page kind layouts. Now you can use the JSON output to build search indexes, chatbots, dashboards, and other applications that require structured data.\n",
    "tags": []
  },
  {
    "id": "59b8d1ce1f9051ec05b4ebf01f87542f",
    "title": "Search",
    "description": "learn how to add search to your Hugo site.",
    "lastCommit": "2024-04-17 20:54:28 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Theme Building",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/guides/themes/search/",
    "relURI": "/guides/themes/search/",
    "body": "",
    "tags": []
  },
  {
    "id": "47dba980b1287a12da205354554a385d",
    "title": "Enable Algolia Search",
    "description": "learn how to add Algolia search to your Hugo site.",
    "lastCommit": "2024-04-17 21:43:53 -0400 EDT",
    "version": "latest",
    "section": "guides",
    "parent": "Search",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/guides/themes/search/algolia/",
    "relURI": "/guides/themes/search/algolia/",
    "body": "This guide provides a quick method for integrating Algolia search into your Hugo website. It involves using a straightforward cron job to update your index and the algoliasearch-lite script version, which is capable of handling search-only operations.\nAlgolia is a hosted search engine capable of delivering real-time results from the first keystroke. Algolia provides a free tier that includes 10,000 records and 50,000 operations per month. For most projects, startups, and small businesses, this should be more than enough to get started. Before You Start # Set up JSON output format templates. Review the Algolia API reference needed for building your search layout. Check Your Site IndexYou can perform a quick test by going to localhost:1313/index.json; it should look like this. How to Create an Algolia Index # Create a new Algolia account or log in to your existing account. Navigate to Data Sources \u0026gt; Connectors. Find the Json tile and select Connect. Select Get Started. Configure Data Source # Select None for authentication. Input the URL of your hosted index.json file. (e.g., https://milodocs-theme.netlify.app/index.json). Specify a unique property identifier for your Algolia records (e.g., id if you\u0026rsquo;ve added one to your json template.). Name the data source. Select Create Source. Configure Destination # Input a name for your destination index. If it doesn\u0026rsquo;t exist, it will get automatically created. Generate index credentials by selecting Create one for me. Name the destination. Select Create Destination. Configure Task # For frequency, select Scheduled and choose Every day. For behavior, select Replace. Select Create Task. Press the Play button on the task to trigger your first pull. Select Run to confirm. Configure Index # This may work once we set up the rest out of the box, but it\u0026rsquo;s better to configure and rank your searchable attributes.\nNavigate to Search \u0026gt; Index. Select the Configuration tab. Select the Searchable Attribute section. Input all of the searchable attributes you\u0026rsquo;d like and rank them. title description body Select Review and Save Settings. You now have an Algolia index that is automatically refreshed once a day! No complicated cralwers or plugins needed.\nHow to Enable Algolia Search # Add Algolia Search Lite Script # Let\u0026rsquo;s add the Algolia Search Lite script to your Hugo project. This script is needed to perform search-only operations and populate your search UI.\nNavigate to layouts/partials/footer.html in your Hugo project. Add the following Algolia Search Lite script to the file: \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/algoliasearch@latest/dist/algoliasearch-lite.umd.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; Copy You can also install Algolia InstantSearch.js in your project to add more advanced features, but it\u0026rsquo;s not required for basic search functionality.\npnpm install algoliasearch instantsearch.js Copy Define a Results Container # Let\u0026rsquo;s create our search results container element. This element will be hidden by default and will be populated with search results when the user types in the search input.\nCreate a new file named searchResultsContainer.html in your theme\u0026rsquo;s layouts/partials directory. Input the following code: \u0026lt;div id=\u0026#34;searchResultsContainer\u0026#34; class=\u0026#34;hidden w-full lg:w-3/5 p-4\u0026#34;\u0026gt; \u0026lt;!-- populated by JS --\u0026gt; \u0026lt;/div\u0026gt; Copy Add the partial to your theme\u0026rsquo;s layouts/_default/baseof.html layout file. Here\u0026rsquo;s where I\u0026rsquo;ve put mine: \u0026lt;main class=\u0026#34;max-w-screen-xl 2xl:max-w-screen-2xl mx-auto flex\u0026#34;\u0026gt; {{partial \u0026#34;navigation/sidebar-left.html\u0026#34; . }} \u0026lt;div id=\u0026#34;pageContainer\u0026#34; class=\u0026#34;w-full lg:w-3/5\u0026#34;\u0026gt; \u0026lt;!-- Make sure your page container has an id for targeting --\u0026gt; {{- if .IsHome}}{{ block \u0026#34;home\u0026#34; . }}{{ end }}{{else}}{{ block \u0026#34;main\u0026#34; . }}{{ end }}{{- end}} \u0026lt;/div\u0026gt; {{partial \u0026#34;searchResultsContainer.html\u0026#34; . }} \u0026lt;!-- Add this line --\u0026gt; {{partial \u0026#34;navigation/sidebar-right.html\u0026#34; . }} \u0026lt;/main\u0026gt; Copy Make sure your page container element has an id attribute so that it can be targeted by the JavaScript for toggling visibility. Define a SearchBox Input # Let\u0026rsquo;s create a search input element that will be used to trigger the search functionality. Typically this is placed in the layout that defines your top navigation bar.\n\u0026lt;!-- Searchbar --\u0026gt; \u0026lt;div id=\u0026#34;topNavSearch\u0026#34; class=\u0026#34;flex items-center space-x-4 text-xs\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;search\u0026#34; id=\u0026#34;searchInput\u0026#34; class=\u0026#34;border rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-brand md:w-96 bg-zinc-100 text-black\u0026#34; placeholder=\u0026#34;Search...\u0026#34; aria-label=\u0026#34;Search\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; Copy Create a search.js File # Now that we have our search results container and search input elements set up, let\u0026rsquo;s create a JavaScript file that will handle the search functionality.\nThis particular script transforms your search results (hits) by grouping them by their parent value, which is a field in my JSON schema. You can group or transform the returned hits in a variety of ways \u0026mdash; feel free to make this your own.\nCreate a new file named search.js in your theme\u0026rsquo;s assets/js directory. Input the following code: search.js document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function () { const searchInput = document.getElementById(\u0026#34;searchInput\u0026#34;); const pageContainer = document.getElementById(\u0026#34;pageContainer\u0026#34;); const searchResultsContainer = document.getElementById(\u0026#34;searchResultsContainer\u0026#34;); // Algolia configuration const searchClient = algoliasearch( \u0026#34;4TYL7GJO66\u0026#34;, // APP ID \u0026#34;4b6a7e6e3a2cf663b3e4f8a372e8453a\u0026#34; // Search Only API Key ); const searchIndex = searchClient.initIndex(\u0026#34;default\u0026#34;); // Replace \u0026#39;default\u0026#39; with your Algolia index name // Function to group search results by parent function groupResultsByParent(hits) { const groupedResults = {}; hits.forEach((hit) =\u0026gt; { const parent = hit.parent; if (!groupedResults[parent]) { groupedResults[parent] = []; } groupedResults[parent].push(hit); }); return groupedResults; } // Function to perform Algolia search and update results with more details function performAlgoliaSearch(query) { searchIndex .search(query) .then(({ hits }) =\u0026gt; { // Group search results by parent const groupedResults = groupResultsByParent(hits); // Display grouped search results in the search results container const resultsHTML = Object.keys(groupedResults).map((parent) =\u0026gt; { const parentResults = groupedResults[parent]; const parentHTML = parentResults .map((hit) =\u0026gt; { return ` \u0026lt;a href=\u0026#34;${hit.relURI}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mb-4 text-black hover:bg-brand hover:text-white rounded-lg p-4 my-2 bg-zinc-100 transition duration-300 shadow-md\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;text-lg font-bold\u0026#34;\u0026gt;${hit.title}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-zinc-200\u0026#34;\u0026gt;${hit.description}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; `; }) .join(\u0026#34;\u0026#34;); return ` \u0026lt;div class=\u0026#34;mb-8\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-xl font-bold text-black\u0026#34;\u0026gt;${parent}\u0026lt;/h2\u0026gt; ${parentHTML} \u0026lt;/div\u0026gt; `; }); searchResultsContainer.innerHTML = resultsHTML.join(\u0026#34;\u0026#34;); }) .catch((err) =\u0026gt; { console.error(err); }); } // Event listener for typing in the search input searchInput.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; { const inputValue = searchInput.value.trim(); // Toggle \u0026#34;hidden\u0026#34; class based on whether there is input in the search field if (inputValue !== \u0026#34;\u0026#34;) { // Show search results container and hide page container searchResultsContainer.classList.remove(\u0026#34;hidden\u0026#34;); pageContainer.classList.add(\u0026#34;hidden\u0026#34;); // Trigger Algolia search with the input value performAlgoliaSearch(inputValue); } else { // Show page container and hide search results container searchResultsContainer.classList.add(\u0026#34;hidden\u0026#34;); pageContainer.classList.remove(\u0026#34;hidden\u0026#34;); } }); }); Copy Replace the IDs in the script with the appropriate IDs from your theme\u0026rsquo;s layout files. You\u0026rsquo;ll need one for the search input, one for the page container, and one for the search results container. Replace the Algolia configuration values with your own Algolia App ID and Search Only API Key. You can find these values in your Algolia dashboard. Never expose your Algolia Admin API Key in your front-end code. This key should only be used in your back-end code through an environment variable passed in during deployment. For this guide, we are only using the Search Only API Key, which is safe to expose in your front-end code. Replace the default value in the searchIndex variable with the name of your Algolia index that we created earlier. Make the Search Script Available # Now that we have our search script set up, let\u0026rsquo;s make it available in our Hugo project.\nNavigate to your theme\u0026rsquo;s layouts/partials/head/js.html file. Add the script to your bundling steps so it gets included in the site build. {{- $jsResources := slice }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/main.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/chat.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/darkmode.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/search.js\u0026#34;) }} \u0026lt;!-- here --\u0026gt; {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/chat.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/code-clipboard.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/tiles.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/tabs.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/glossary.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/toc.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/sidebar-left.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/chatTocToggle.js\u0026#34;) }} {{- if eq hugo.Environment \u0026#34;development\u0026#34; }} {{- $jsBundle := $jsResources | resources.Concat \u0026#34;js/bundle.js\u0026#34; | js.Build }} \u0026lt;script src=\u0026#34;{{ $jsBundle.RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- else }} {{- $opts := dict \u0026#34;minify\u0026#34; true }} {{- $jsBundle := $jsResources | resources.Concat \u0026#34;js/bundle.js\u0026#34; | js.Build $opts | fingerprint }} \u0026lt;script src=\u0026#34;{{ $jsBundle.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $jsBundle.Data.Integrity }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} Copy Test # Run hugo server locally. Perform a search in your search bar. Review the console for any errors. ",
    "tags": []
  },
  {
    "id": "acd39d1787e18fae8c246aa195338a42",
    "title": "Reference",
    "description": "Reference theme logic for advanced config or development.",
    "lastCommit": "2024-04-17 08:14:51 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "Milo Theme Docs",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/",
    "relURI": "/reference/",
    "body": "",
    "tags": []
  },
  {
    "id": "378ac2c71d0765c2f7312aef6036b5ba",
    "title": "Assets",
    "description": "Learn about the assets used in the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Reference",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/assets/",
    "relURI": "/reference/assets/",
    "body": "",
    "tags": []
  },
  {
    "id": "73c702e778fdf2c3d154caf1a7538b5a",
    "title": "CSS",
    "description": "Learn about the CSS  used in the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Assets",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/assets/css/",
    "relURI": "/reference/assets/css/",
    "body": "The CSS used in the MiloDocs theme is powered by TailwindCSS.\nBefore You Start # Before making any changes, let\u0026rsquo;s deploy locally and activate style monitoring.\nRun pnpm start to deploy locally. Navigate into /themes/milo. Run pnpm watch-tw. This enables monitoring for CSS changes. Modify Templates # You can change the TailwindCSS classes assigned within the Hugo templates by doing the following:\nNavigate into /themes/milo/layouts. Choose which kind of template you wish to update. _default: high-level content type templates (baseof, home, list, section, single, glossary, tutorial) partials: flexible components used in any default template (tiles, next/prev, etc) shortcodes: markdown-file compatible components used inline with your documentation copy Make changes. Verify changes were successful. Save. Modify Global Theme Extensions # You can modify the default extensions the Milo Docs theme has set for TailwindCSS. This is useful when you\u0026rsquo;d like to change the branded fonts or change Tailwind\u0026rsquo;s default font sizes.\nUpdating Fonts?If you are updating the fonts, make sure that you:\nInstall your font files at /static/fonts. Add them to your CSS at /themes/milo/assets/css/src/input.css. Navigate into /themes/milo/. Open the tailwind.config.js file. Update the theme.extends entries. Modify Stylesheets # Hugo can reference CSS from multiple locations (e.g., static and assets). The MiloDocs theme keeps all CSS in the assets folder since we want to process the files in a variety of ways \u0026mdash; such as concatenating many modular CSS files together into a bundled output that we can minify for production deployments.\nfonts.css # The fonts.css file is where you can add/replace the font references to adhere to your brand aesthetic.\n/* Rubik Variable Font */ @font-face { font-family: \u0026#39;Rubik\u0026#39;; src: url(\u0026#39;../fonts/Rubik-VariableFont_wght.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;); font-weight: 300 900; /* Range of weights available in the variable font */ font-display: swap; } /* Rubik Italic Variable Font */ @font-face { font-family: \u0026#39;Rubik\u0026#39;; src: url(\u0026#39;../fonts/Rubik-Italic-VariableFont_wght.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;); font-style: italic; font-weight: 300 900; /* Range of weights available in the variable font */ font-display: swap; } Copy colors.css # The colors.css file is where you can replace the color references to adhere to your brand aesthetic.\n:root { --primary-gradient-color: #ffffff; --secondary-gradient-color: rgb(138, 193, 149, 0.500); /* HPE Brand Colors */ --color-brand:#8ac195; /*primary color*/ --color-brand-1:rgba(131, 122, 117, 0.667); /*secondary color*/ --color-brand-2:#acc18a; /*tertiary color*/ --color-brand-3:#86a6cf; /*note color*/ --color-brand-4:#ADD9F4; /*tip color */ --color-brand-5:#dbd985; /*security color */ --color-brand-6:#d4ac84; /*warning color */ --color-brand-7:#F3B3A6; /*danger color */ } .dark { --primary-gradient-color: rgb(138, 193, 149, 0.300); /* Change this to your dark mode color */ --secondary-gradient-color: #202020; /* Change this to your dark mode color */ } Copy main.css # The main.css file is generated from the src/input.css file. All of the core styles that are brand agnostic live in these files.\nDo not directly update the main.css file; instead, edit the src/input.css file while pnpm watch-tw is active. ",
    "tags": []
  },
  {
    "id": "49618233b7f26384722bdbeca5c52a86",
    "title": "JS",
    "description": "Learn about the Javascript used in the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Assets",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/assets/js/",
    "relURI": "/reference/assets/js/",
    "body": " feedback encouragedI\u0026rsquo;m by no means a JS expert; if you feel these files can be optimized or re-written in any way, don\u0026rsquo;t hesitate to reach out on GitHub / submit a pull request. ",
    "tags": []
  },
  {
    "id": "f0741c669e32f69d1760eec213efc356",
    "title": "chatTocToggle.js",
    "description": "Learn about how the chatTocToggle.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/chattoctoggle/",
    "relURI": "/reference/assets/js/chattoctoggle/",
    "body": "The chatTocToggle.js file is used to manage the user\u0026rsquo;s discovery preference globally across the site and is associated with the following partial layouts:\nnavigation/sidebar-right.html article/chat.html article/toc.html How it Works # This script defaults to displaying the chatGPT UX experience initially. When a user selects the toggle, the ToC UX is activated and will persist site-wide.\nSource Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function (event) { const chatTocToggle = document.getElementById(\u0026#34;chatTocToggle\u0026#34;); const chatContainer = document.getElementById(\u0026#34;chatContainer\u0026#34;); const tocContainer = document.getElementById(\u0026#34;tocContainer\u0026#34;); const chatRobot = document.getElementById(\u0026#34;chatRob\u0026#34;); const chatToc = document.getElementById(\u0026#34;chatToc\u0026#34;); // Check if chatTocSettings in user\u0026#39;s local storage is set; if not set or value is \u0026#39;chat\u0026#39;, toggle hidden on chatContainer; if value is \u0026#39;toc\u0026#39;, toggle the tocContainer const chatTocSettings = localStorage.getItem(\u0026#34;chatTocSettings\u0026#34;); if (chatTocSettings === null || chatTocSettings === \u0026#34;chat\u0026#34;) { chatContainer.classList.remove(\u0026#34;hidden\u0026#34;); tocContainer.classList.add(\u0026#34;hidden\u0026#34;); } else if (chatTocSettings === \u0026#34;toc\u0026#34;) { chatContainer.classList.add(\u0026#34;hidden\u0026#34;); tocContainer.classList.remove(\u0026#34;hidden\u0026#34;); } // Update the button content based on the visibility of chatContainer updateButtonContent(); // Add a click event listener to the chatTocToggle button chatTocToggle.addEventListener(\u0026#34;click\u0026#34;, function () { // Toggle both the chatContainer and tocContainer visibility chatContainer.classList.toggle(\u0026#34;hidden\u0026#34;); tocContainer.classList.toggle(\u0026#34;hidden\u0026#34;); // Update the preference and button content based on the visibility of chatContainer if (!chatContainer.classList.contains(\u0026#34;hidden\u0026#34;)) { localStorage.setItem(\u0026#34;chatTocSettings\u0026#34;, \u0026#34;chat\u0026#34;); } else { localStorage.setItem(\u0026#34;chatTocSettings\u0026#34;, \u0026#34;toc\u0026#34;); } // Update the button content after toggling updateButtonContent(); }); // Function to update the button content based on the visibility of chatContainer function updateButtonContent() { const isChatVisible = !chatContainer.classList.contains(\u0026#34;hidden\u0026#34;); if (isChatVisible) { chatRobot.classList.remove(\u0026#34;hidden\u0026#34;); chatToc.classList.add(\u0026#34;hidden\u0026#34;); } else { chatRobot.classList.add(\u0026#34;hidden\u0026#34;); chatToc.classList.remove(\u0026#34;hidden\u0026#34;); } } }); Copy ",
    "tags": []
  },
  {
    "id": "50b832cb1f95e262ee604609a59a1680",
    "title": "darkmode.js",
    "description": "Learn about how the darkmode.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/darkmode/",
    "relURI": "/reference/assets/js/darkmode/",
    "body": "The darkmode.js file is used to manage the user\u0026rsquo;s theme preference and is associated with the navigation/top.html partial layout.\n\u0026lt;div class=\u0026#34;flex items-center space-x-4\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;chatTocToggle\u0026#34; aria-label=\u0026#34;Toggle Chat\u0026#34; class=\u0026#34;hidden md:block\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;w-5 h-5\u0026#34;\u0026gt;\u0026lt;img id=\u0026#34;chatRob\u0026#34; src=\u0026#34;/icons/robot.svg\u0026#34; alt=\u0026#34;toggle\u0026#34; class=\u0026#34;hidden\u0026#34; title=\u0026#34;Chat Panel\u0026#34;\u0026gt;\u0026lt;img id=\u0026#34;chatToc\u0026#34; src=\u0026#34;/icons/toc.svg\u0026#34; alt=\u0026#34;toggle\u0026#34; class=\u0026#34;hidden\u0026#34; title=\u0026#34;TOC Panel\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;darkModeToggle\u0026#34; aria-label=\u0026#34;Toggle Darkmode\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;w-5 h-5\u0026#34;\u0026gt;\u0026lt;img id=\u0026#34;moon\u0026#34; src=\u0026#34;/icons/dark.svg\u0026#34; alt=\u0026#34;moon\u0026#34; class=\u0026#34;hidden\u0026#34; title=\u0026#34;Dark Mode\u0026#34;\u0026gt;\u0026lt;img id=\u0026#34;sun\u0026#34; src=\u0026#34;/icons/light.svg\u0026#34; alt=\u0026#34;sun\u0026#34; class=\u0026#34;hidden\u0026#34; title=\u0026#34;Light Mode\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; Copy How it Works # This script checks to if the user has darkmode saved in their local storage. If not, when toggled it: Saves the setting to local storage Adds the dark class to the html element Swaps the path for all image elements associated with the icon class from /icons/light/ to /icons/dark/ You can find the .dark class styling overrides in the assets/css/src/input.css file. Source Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function(event) { const darkModeToggle = document.getElementById(\u0026#39;darkModeToggle\u0026#39;); const moon = document.getElementById(\u0026#39;moon\u0026#39;); const sun = document.getElementById(\u0026#39;sun\u0026#39;); const lightModeHome = document.getElementById(\u0026#39;lightModeHome\u0026#39;); const darkModeHome = document.getElementById(\u0026#39;darkModeHome\u0026#39;); // Initialize inMemoryStorage with a default theme-mode of \u0026#39;light\u0026#39; let inMemoryStorage = { \u0026#39;theme-mode\u0026#39;: \u0026#39;light\u0026#39; }; // Check if localStorage is available and writable function isLocalStorageAvailable() { try { const testKey = \u0026#39;__storage_test__\u0026#39;; localStorage.setItem(testKey, testKey); localStorage.removeItem(testKey); console.log(\u0026#39;localStorage is available for theme features\u0026#39;); return true; } catch (e) { console.log(\u0026#39;localStorage is not available for theme features\u0026#39;); return false; } } // Safe wrapper for accessing storage const storage = isLocalStorageAvailable() ? localStorage : inMemoryStorage; function safeGetItem(key) { return typeof storage.getItem === \u0026#39;function\u0026#39; ? storage.getItem(key) : storage[key]; } function safeSetItem(key, value) { if (typeof storage.setItem === \u0026#39;function\u0026#39;) { storage.setItem(key, value); } else { storage[key] = value; } } // Load saved theme preference const savedTheme = safeGetItem(\u0026#39;theme-mode\u0026#39;); if (savedTheme \u0026amp;\u0026amp; savedTheme === \u0026#39;dark\u0026#39;) { document.documentElement.classList.add(\u0026#39;dark\u0026#39;); } else { document.documentElement.classList.remove(\u0026#39;dark\u0026#39;); } updateButtonText(); darkModeToggle.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const isDarkMode = document.documentElement.classList.toggle(\u0026#39;dark\u0026#39;); safeSetItem(\u0026#39;theme-mode\u0026#39;, isDarkMode ? \u0026#39;dark\u0026#39; : \u0026#39;light\u0026#39;); updateButtonText(); }); function updateButtonText() { const isDarkMode = document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); if (!isDarkMode) { moon.classList.add(\u0026#39;hidden\u0026#39;); sun.classList.remove(\u0026#39;hidden\u0026#39;); if (lightModeHome) lightModeHome.classList.remove(\u0026#39;hidden\u0026#39;); if (darkModeHome) darkModeHome.classList.add(\u0026#39;hidden\u0026#39;); } else { moon.classList.remove(\u0026#39;hidden\u0026#39;); sun.classList.add(\u0026#39;hidden\u0026#39;); if (lightModeHome) lightModeHome.classList.add(\u0026#39;hidden\u0026#39;); if (darkModeHome) darkModeHome.classList.remove(\u0026#39;hidden\u0026#39;); } } }); Copy ",
    "tags": []
  },
  {
    "id": "8d34de8eb90ed01b2927cd50bc38623d",
    "title": "glossary.js",
    "description": "Learn about how the glossary.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/glossary/",
    "relURI": "/reference/assets/js/glossary/",
    "body": "The glossary.js file is used to manage the visual \u0026ldquo;spotlight effect\u0026rdquo; experience on the glossary entries found in the glossary.html partial layout.\nHow it Works # This functionality is nearly identical to the js/tiles.js functionality \u0026ndash; with the exception of the utilized class name, glossary-entry. This is so that you can more easily customize each experience on your own if you wish. If the page has elements with the glossary-entry class, this script updates their background radial gradient values to mirror the position of the mouse.\nThe color of the spotlight effect is determined by css/colors.css, specifically:\ninside: var(--primary-gradient-color) outside: var(--secondary-gradient-color) Source Code # document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, () =\u0026gt; { const cards = document.querySelectorAll(\u0026#39;.glossary-entry\u0026#39;); const positions = { x: 50, y: 50 }; // Default to center function animate() { cards.forEach(card =\u0026gt; { const rect = card.getBoundingClientRect(); const mouseX = (positions.x - rect.left) / rect.width * 100; const mouseY = (positions.y - rect.top) / rect.height * 100; card.style.background = `radial-gradient(circle at ${mouseX}% ${mouseY}%, var(--primary-gradient-color), var(--secondary-gradient-color))`; }); requestAnimationFrame(animate); } cards.forEach(card =\u0026gt; { card.addEventListener(\u0026#39;mousemove\u0026#39;, (e) =\u0026gt; { // Update gradient position positions.x = e.clientX; positions.y = e.clientY; }); card.addEventListener(\u0026#39;mouseover\u0026#39;, () =\u0026gt; { card.style.transform = \u0026#39;translateY(-10px) scale(1.05)\u0026#39;; card.style.boxShadow = \u0026#39;0 20px 30px #00000033\u0026#39;; }); card.addEventListener(\u0026#39;mouseout\u0026#39;, () =\u0026gt; { card.style.transform = \u0026#39;translateY(0) scale(1.0)\u0026#39;; card.style.boxShadow = \u0026#39;\u0026#39;; }); }); animate(); }); Copy ",
    "tags": []
  },
  {
    "id": "7e387df19aa419befc9557282e35a584",
    "title": "main.js",
    "description": "Learn about how the main.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/main/",
    "relURI": "/reference/assets/js/main/",
    "body": "The main.js file isn\u0026rsquo;t really used at the moment, but I keep it around so people can see the default Hugo message.\nSource Code # console.log(\u0026#39;This site was generated by Hugo.\u0026#39;); // grab all the svgs // get all the divs with the class of svg-icon const svgIcons = document.querySelectorAll(\u0026#39;.svg-icon\u0026#39;); console.log(svgIcons); Copy ",
    "tags": []
  },
  {
    "id": "7ccc8f35fb61ec46a48f5f809042bf80",
    "title": "search.js",
    "description": "Learn about how the search.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/search/",
    "relURI": "/reference/assets/js/search/",
    "body": "The search.js file is used to manage the Algolia search integration and experience.\nHow it Works # This script automatically toggles the view of a regular page versus the search page when a user inputs a search string. With every added letter, a new search is performed against the index.\nResults returned are grouped by parent article and then provided as a stacked series of links.\nfree search limitAlgolia typically allows 10,000 free monthly searches \u0026mdash; though this is subject to change. Set Up # Create an Algolia account. Provide your App ID and Search Only API Key to the searchClient (these are safe to reveal; the Admin API Key is not.). Push or upload your site\u0026rsquo;s index, found at /index.json. That\u0026rsquo;s it! Start searching.\nI personally just download this file and upload it per release; it\u0026rsquo;s a manual process \u0026mdash; but super easy. You are welcome to integrate the Algolia API with your Admin API Key to push auto updates.\nhave it your wayThere are several ways to implement Algolia; DocSearch is popular and free. I personally like to integrate the style of the UX more, but this can require more knowledge of InstantSearch.js.\nIf you like the default implementation but wish to style the search hits differently, you can do so in the performAlgoliaSearch(query) function.\nSource Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function () { const searchInput = document.getElementById(\u0026#34;searchInput\u0026#34;); const pageContainer = document.getElementById(\u0026#34;pageContainer\u0026#34;); const searchResultsContainer = document.getElementById( \u0026#34;searchResultsContainer\u0026#34; ); // Algolia configuration const searchClient = algoliasearch( \u0026#34;4TYL7GJO66\u0026#34;, // APP ID \u0026#34;4b6a7e6e3a2cf663b3e4f8a372e8453a\u0026#34; // Search Only API Key ); const searchIndex = searchClient.initIndex(\u0026#34;default\u0026#34;); // Replace \u0026#39;default\u0026#39; with your Algolia index name console.log(\u0026#34;sclient\u0026#34;, searchClient); // console.log(\u0026#34;s\u0026#34;, search); // Function to group search results by parent function groupResultsByParent(hits) { const groupedResults = {}; hits.forEach((hit) =\u0026gt; { const parent = hit.parent; if (!groupedResults[parent]) { groupedResults[parent] = []; } groupedResults[parent].push(hit); }); return groupedResults; } // Function to perform Algolia search and update results with more details function performAlgoliaSearch(query) { searchIndex .search(query) .then(({ hits }) =\u0026gt; { // Group search results by parent const groupedResults = groupResultsByParent(hits); // Display grouped search results in the search results container const resultsHTML = Object.keys(groupedResults).map((parent) =\u0026gt; { const parentResults = groupedResults[parent]; const parentHTML = parentResults .map((hit) =\u0026gt; { return ` \u0026lt;a href=\u0026#34;${hit.relURI}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mb-4 text-black hover:bg-brand hover:text-white rounded-lg p-4 my-2 bg-zinc-100 transition duration-300 shadow-md\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;text-lg font-bold\u0026#34;\u0026gt;${hit.title}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-zinc-200\u0026#34;\u0026gt;${hit.description}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; `; }) .join(\u0026#34;\u0026#34;); return ` \u0026lt;div class=\u0026#34;mb-8\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-xl font-bold text-black\u0026#34;\u0026gt;${parent}\u0026lt;/h2\u0026gt; ${parentHTML} \u0026lt;/div\u0026gt; `; }); searchResultsContainer.innerHTML = resultsHTML.join(\u0026#34;\u0026#34;); }) .catch((err) =\u0026gt; { console.error(err); }); } // Event listener for typing in the search input searchInput.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; { const inputValue = searchInput.value.trim(); // Toggle \u0026#34;hidden\u0026#34; class based on whether there is input in the search field if (inputValue !== \u0026#34;\u0026#34;) { // Show search results container and hide page container searchResultsContainer.classList.remove(\u0026#34;hidden\u0026#34;); pageContainer.classList.add(\u0026#34;hidden\u0026#34;); // Trigger Algolia search with the input value performAlgoliaSearch(inputValue); } else { // Show page container and hide search results container searchResultsContainer.classList.add(\u0026#34;hidden\u0026#34;); pageContainer.classList.remove(\u0026#34;hidden\u0026#34;); } }); }); Copy ",
    "tags": []
  },
  {
    "id": "148bf8b882b1c35e2dc0167d162010b2",
    "title": "sidebar-left.js",
    "description": "Learn about how the sidebar-left.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/sidebar-left/",
    "relURI": "/reference/assets/js/sidebar-left/",
    "body": "The sidebar-left.js file is used to manage the scroll-into-view link experience in the navigation/sidebar-left.html partial layout.\nHow it Works # The script finds the active link via [data-current=\u0026quot;true] attribute set by logic in the sidebar-left.html template. After a 300ms delay, it scrolls until the active link is visible. Source Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { const sidebar = document.getElementById(\u0026#39;linkTree\u0026#39;); function setInitialVisibility() { // Initially hide all ul elements of level 3 and higher sidebar.querySelectorAll(\u0026#39;ul[data-level]\u0026#39;).forEach(function(ul) { const level = parseInt(ul.getAttribute(\u0026#39;data-level\u0026#39;)); if (level \u0026gt; 2) { ul.style.display = \u0026#39;none\u0026#39;; } }); } function highlightAndRevealPath() { const activeLinks = sidebar.querySelectorAll(\u0026#39;a[data-current=\u0026#34;true\u0026#34;]\u0026#39;); activeLinks.forEach(link =\u0026gt; { // Highlight the active link link.classList.add(\u0026#39;text-brand\u0026#39;); let element = link.parentElement; while (element \u0026amp;\u0026amp; element !== sidebar) { if (element.tagName.toLowerCase() === \u0026#39;ul\u0026#39;) { const level = parseInt(element.getAttribute(\u0026#39;data-level\u0026#39;)); element.style.display = \u0026#39;block\u0026#39;; // Make sure the list is visible // Dynamically determine the next level based on the current one and show it const nextLevel = level + 1; const parentLi = link.closest(\u0026#39;li\u0026#39;); const nextLevelUl = parentLi.querySelector(`ul[data-level=\u0026#34;${nextLevel}\u0026#34;]`); if (nextLevelUl) { nextLevelUl.style.display = \u0026#39;block\u0026#39;; } } element = element.parentElement; } }); } function scrollToActiveLink() { const activeLink = sidebar.querySelector(\u0026#39;a[data-current=\u0026#34;true\u0026#34;]\u0026#39;); if (activeLink) { // Calculate the position to scroll to in the sidebar const topPos = activeLink.offsetTop; sidebar.scrollTop = topPos - sidebar.offsetTop - 20; // Adjusted to improve viewability } } setInitialVisibility(); highlightAndRevealPath(); scrollToActiveLink(); }); Copy ",
    "tags": []
  },
  {
    "id": "e76961636a2e4e109f2ba5b5aa64e007",
    "title": "tabs.js",
    "description": "Learn about how the tabs.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/tabs/",
    "relURI": "/reference/assets/js/tabs/",
    "body": "The tabs.js file is used to manage the tabbed experience created by a combination of shortcodes found in /layouts/shortcodes/tabs.\ncontainer tabButtons tab tabContentsContainer tabContent \u0026lt;!--tabs/container.html --\u0026gt; \u0026lt;section class=\u0026#34;bg-zinc-100 p-2 my-2 rounded-md\u0026#34; data-component=\u0026#34;tabs\u0026#34;\u0026gt; {{- .Inner -}} \u0026lt;/section\u0026gt; Copy \u0026lt;!-- tabs/tabButtons.html --\u0026gt; \u0026lt;div class=\u0026#34;flex flex-col md:flex-row ml-4 mt-2 md:space-x-4\u0026#34; data-tab-id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; | lower | urlize }}\u0026#34;\u0026gt; {{- .Inner -}} \u0026lt;/div\u0026gt; Copy \u0026lt;!--tabs/tab.html --\u0026gt; {{- $state := .Get \u0026#34;state\u0026#34; | lower -}} \u0026lt;button data-tab-option=\u0026#34;{{ .Parent.Get \u0026#34;id\u0026#34; | lower |urlize }}/{{ .Get \u0026#34;option\u0026#34; | lower | urlize }}\u0026#34; type=\u0026#34;button\u0026#34; class=\u0026#34;px-4 py-2 border rounded {{if eq $state \u0026#34;active\u0026#34;}}bg-brand text-white {{else}} bg-white text-black{{end}}\u0026#34;\u0026gt;{{ .Get \u0026#34;option\u0026#34; }}\u0026lt;/button\u0026gt; Copy \u0026lt;!-- tabs/tabContentsContainer.html --\u0026gt; \u0026lt;div class=\u0026#34;w-full p-2\u0026#34; \u0026gt; {{- .Inner -}} \u0026lt;/div\u0026gt; Copy \u0026lt;!-- tabs/tabContent.html --\u0026gt; {{- $val1 := .Get \u0026#34;val1\u0026#34; | lower -}} {{- $val2 := .Get \u0026#34;val2\u0026#34; | lower -}} {{- $val3 := .Get \u0026#34;val3\u0026#34; | lower -}} {{- $val4 := .Get \u0026#34;val4\u0026#34; | lower -}} {{- $val5 := .Get \u0026#34;val5\u0026#34; | lower -}} {{- $val6 := .Get \u0026#34;val6\u0026#34; | lower -}} {{- $val7 := .Get \u0026#34;val7\u0026#34; | lower -}} {{- $answer := $val1 -}} {{- with $val2 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val3 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val4 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val5 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val6 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val7 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} \u0026lt;div class=\u0026#34;p-2 mb-2\u0026#34; data-tabcontent=\u0026#34;{{$answer}}\u0026#34; \u0026gt; {{- $.Page.RenderString .Inner -}} \u0026lt;/div\u0026gt; Copy How it Works # If a page has elements with [data-component=\u0026quot;tabs\u0026quot;], the script collects them all into an array. For each collection of tabs, it then collects the button options ([data-tab-id])and corresponding tabbed markdown content ([data-tabcontent]). Event listeners are setup for each button; when selected, the corresponding content is revealed and the button highlighted; other options are hidden/muted. Source Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function(event) { if (document.querySelectorAll(\u0026#39;[data-component=\u0026#34;tabs\u0026#34;]\u0026#39;)) { var tabs = document.querySelectorAll(\u0026#39;[data-component=\u0026#34;tabs\u0026#34;]\u0026#39;); console.log(\u0026#34;tabs \u0026#34;, tabs) tabs.forEach(function(tab) { // get each child step element with the data-wizard-id attribute let options = tab.querySelectorAll(\u0026#39;[data-tab-id]\u0026#39;); let optionContent = tab.querySelectorAll(\u0026#39;[data-tabcontent]\u0026#39;); // Changed to lowercase \u0026#39;c\u0026#39; getAnswers({tab, optionContent}) // listen for click on button elements within each step options.forEach((option) =\u0026gt; { // get all of the buttons within the step let buttons = option.querySelectorAll(\u0026#39;button\u0026#39;) // listen for click on each button buttons.forEach((button) =\u0026gt; { button.addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { // add green class to the clicked button e.target.classList.remove(\u0026#39;bg-white\u0026#39;, \u0026#39;text-black\u0026#39;) e.target.classList.add(\u0026#39;bg-brand\u0026#39;, \u0026#39;text-white\u0026#39;) // remove green class from the other buttons buttons.forEach((button) =\u0026gt; { if (button !== e.target) { button.classList.remove(\u0026#39;bg-brand\u0026#39;, \u0026#39;text-white\u0026#39;) button.classList.add(\u0026#39;bg-white\u0026#39;, \u0026#39;text-black\u0026#39;) } }) getAnswers({tab, optionContent}) }) }) }) }); function getAnswers({tab, optionContent}){ // get all buttons with the green class let activeButtons = tab.querySelectorAll(\u0026#39;button.bg-brand\u0026#39;) // get the data-tab-option attribute of all the buttons with the green class let activeButtonOptions = [] console.log(\u0026#34;activeButtonOptions \u0026#34;, activeButtonOptions) activeButtons.forEach((button) =\u0026gt; { console.log(\u0026#34;activeButton \u0026#34;, button) activeButtonOptions.push(button.getAttribute(\u0026#39;data-tab-option\u0026#39;)) // Changed to data-tab-option }) console.log(\u0026#34;activeButtonOptions \u0026#34;, activeButtonOptions) let convertedText = activeButtonOptions.join(\u0026#39;/\u0026#39;).toLowerCase() // hide all other answers optionContent.forEach((content) =\u0026gt; { let value = content.getAttribute(\u0026#39;data-tabcontent\u0026#39;) console.log(`value: ` + value) console.log(`convertedText: ` + convertedText) if (value !== convertedText) { content.classList.add(\u0026#39;hidden\u0026#39;) } else { content.classList.remove(\u0026#39;hidden\u0026#39;) } }) } } }); Copy ",
    "tags": []
  },
  {
    "id": "59c4cfecde9da20328c8ebffa6ecbf52",
    "title": "tiles.js",
    "description": "Learn about how the tiles.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/tiles/",
    "relURI": "/reference/assets/js/tiles/",
    "body": "The tiles.js file is used to manage the visual \u0026ldquo;spotlight effect\u0026rdquo; experience on the article tiles found in the article/tiles.html partial layout.\nHow it Works # This functionality is nearly identical to the js/glossary.js functionality \u0026ndash; with the exception of the utilized class name, tile If the page has elements with the tile class, this script updates their background radial gradient values to mirror the position of the mouse.\nThe color of the spotlight effect is determined by css/colors.css, specifically:\ninside: var(--primary-gradient-color) outside: var(--secondary-gradient-color) Source Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { if (document.querySelectorAll(\u0026#34;.tile\u0026#34;)) { const cards = document.querySelectorAll(\u0026#34;.tile\u0026#34;); const positions = { x: 50, y: 50 }; // Default to center function animate() { cards.forEach((card) =\u0026gt; { const rect = card.getBoundingClientRect(); const mouseX = ((positions.x - rect.left) / rect.width) * 100; const mouseY = ((positions.y - rect.top) / rect.height) * 100; card.style.background = `radial-gradient(circle at ${mouseX}% ${mouseY}%, var(--primary-gradient-color), var(--secondary-gradient-color))`; }); requestAnimationFrame(animate); } cards.forEach((card) =\u0026gt; { card.addEventListener(\u0026#34;mousemove\u0026#34;, (e) =\u0026gt; { // Update gradient position positions.x = e.clientX; positions.y = e.clientY; }); card.addEventListener(\u0026#34;mouseover\u0026#34;, () =\u0026gt; { card.style.transform = \u0026#34;translateY(-10px) scale(1.05)\u0026#34;; card.style.boxShadow = \u0026#34;0 20px 30px #00000033\u0026#34;; }); card.addEventListener(\u0026#34;mouseout\u0026#34;, () =\u0026gt; { card.style.transform = \u0026#34;translateY(0) scale(1.0)\u0026#34;; card.style.boxShadow = \u0026#34;\u0026#34;; }); }); animate(); } }); Copy ",
    "tags": []
  },
  {
    "id": "a16e8a359e9b5e546c319c7c9fb95756",
    "title": "toc.js",
    "description": "Learn about how the toc.js file works for this theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "JS",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/assets/js/toc/",
    "relURI": "/reference/assets/js/toc/",
    "body": "The toc.js file is used to manage the \u0026ldquo;scrolling-section-highlight effect\u0026rdquo; experience on the table of contents found in the navigation/sidebar-right.html partial layout.\nHow it Works # If the page has an element with the ID #TableOfContents, this script collects the associated links and highlights them based on scrolling behavior:\nScrolling Down: it highlights the next h2 or h3 as soon as it comes into view. Scrolling Up: it highlights the previous h2 or h3 as soon as the lowest one exits view. Source Code # document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { // Get all TOC links const tocLinks = document.querySelectorAll(\u0026#34;#TableOfContents a\u0026#34;); // Function to highlight the currently viewed section function highlightInView() { const sections = document.querySelectorAll(\u0026#34;h2, h3\u0026#34;); // You may need to adjust the selector based on your HTML structure // Define the top offset (50px in this example) const offset = 50; // Loop through the sections to find the currently viewed one sections.forEach((section) =\u0026gt; { const rect = section.getBoundingClientRect(); // Adjust the condition with the offset if ( rect.top + offset \u0026gt;= 0 \u0026amp;\u0026amp; rect.bottom \u0026lt;= window.innerHeight + offset ) { // Section is in view const sectionId = section.id; tocLinks.forEach((link) =\u0026gt; { if (link.getAttribute(\u0026#34;href\u0026#34;).substring(1) === sectionId) { // Remove the highlight class from all TOC links tocLinks.forEach((tocLink) =\u0026gt; { tocLink.classList.remove(\u0026#34;text-brand\u0026#34;); }); // Add the highlight class to the currently viewed TOC link link.classList.add(\u0026#34;text-brand\u0026#34;); } }); } }); } // Attach the scroll event listener to the window window.addEventListener(\u0026#34;scroll\u0026#34;, highlightInView); }); Copy ",
    "tags": []
  },
  {
    "id": "48c8b7ba57f066a4aece9f46691aeae4",
    "title": "Layouts",
    "description": "Learn about the layouts that make up the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Reference",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/layouts/",
    "relURI": "/reference/layouts/",
    "body": "",
    "tags": []
  },
  {
    "id": "153e0157502c62da5fe535499b9273a7",
    "title": "shortcodes",
    "description": "Learn how to apply shortcodes to display or transform content in markdown files.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Layouts",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/layouts/shortcodes/",
    "relURI": "/reference/layouts/shortcodes/",
    "body": "This theme uses a variety of shortcodes to enable authors of technical documentation.\n",
    "tags": []
  },
  {
    "id": "7c268d5f61c5ab4b732997ea3a492572",
    "title": "ascii.html",
    "description": "learn how to use the asciidocs rendering shortcode",
    "lastCommit": "2024-04-17 11:06:09 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/ascii/",
    "relURI": "/reference/layouts/shortcodes/ascii/",
    "body": "The {{\u0026lt;ascii\u0026gt;}} shortcode renders AsciiDoc markup content inside of markdown files.\nBefore You Start # Complete the steps to Enable AsciiDoc Markup Support Examples # Table # Name Age City John\n25\nNew York\nLisa\n28\nLos Angeles\nMichael\n31\nChicago\n|=== | Name | Age | City | John | 25 | New York | Lisa | 28 | Los Angeles | Michael | 31 | Chicago |=== Copy Source Code # {{/* Requires: - ascii doctor https://docs.asciidoctor.org/asciidoctor/latest/install/ - whitelist ascii doctor in /config/_default/security.yaml */}} {{- $opts := dict \u0026#34;markup\u0026#34; \u0026#34;ad\u0026#34; -}} {{- .Inner | .Page.RenderString $opts -}} {{/* Example: {{\u0026lt;ascii\u0026gt;}} |=== | Name | Age | City | John | 25 | New York | Lisa | 28 | Los Angeles | Michael | 31 | Chicago |=== {{\u0026lt;/ascii\u0026gt;}} */}} Copy ",
    "tags": []
  },
  {
    "id": "c589ccb5d38ffb2ee0f61228dfacd850",
    "title": "collapse.html",
    "description": "learn how to use the collapse shortcode",
    "lastCommit": "2024-04-07 11:56:06 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/collapse/",
    "relURI": "/reference/layouts/shortcodes/collapse/",
    "body": "The {{\u0026lt;collapse\u0026gt;}} shortcode is a simple way to create collapsible sections in your documentation. This is great for hiding large amounts of content that you don\u0026rsquo;t want to overwhelm your readers with.\nHow it Works # The {{\u0026lt;collapse\u0026gt;}} shortcode accepts 2 named args: title and description.\ntitle is the title of the collapsible section. description is the content that will be hidden until the user clicks on the title. Examples # {{\u0026lt;collapse\u0026gt;}}\nExpand this is the hidden content. {{\u0026lt;collapse title=\u0026quot;Click me\u0026quot; description=\u0026quot;I'm hidden content!\u0026quot;\u0026gt;}}\nClick meI\u0026#39;m hidden content!\nthis is the hidden content. Source Code # {{$title := .Get \u0026#34;title\u0026#34; | default \u0026#34;Expand\u0026#34;}} {{$description := .Get \u0026#34;description\u0026#34;}} {{- if ne hugo.Environment \u0026#34;pdf\u0026#34; -}} \u0026lt;section class=\u0026#34;collapse-container mb-4\u0026#34;\u0026gt; \u0026lt;div onclick=\u0026#34;this.nextElementSibling.classList.toggle(\u0026#39;hidden\u0026#39;); this.children[0].children[0].classList.toggle(\u0026#39;rotate-90\u0026#39;)\u0026#34; class=\u0026#34;cursor-pointer px-4 py-2 rounded-md shadow-md bg-zinc-100 text-black flex items-center\u0026#34;\u0026gt; \u0026lt;!-- SVG container with flex-none to prevent it from growing or shrinking --\u0026gt; \u0026lt;div class=\u0026#34;flex-none\u0026#34;\u0026gt; \u0026lt;svg class=\u0026#34;transition-transform transform\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; fill=\u0026#34;none\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke=\u0026#34;#9ca3af\u0026#34; stroke-width=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;path stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; d=\u0026#34;M9 5l7 7-7 7\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-grow ml-2\u0026#34;\u0026gt; {{- with $title -}} \u0026lt;h4 class=\u0026#34;font-bold\u0026#34;\u0026gt;{{- . -}}\u0026lt;/h4\u0026gt; {{- end -}} {{- with $description -}} \u0026lt;p\u0026gt;{{- . -}}\u0026lt;/p\u0026gt; {{- end -}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;hidden px-4 py-2 border border-t-0 border-zinc-100 border-dotted\u0026#34;\u0026gt; {{ .Inner | markdownify }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{- else -}} {{ .Inner | markdownify }} {{- end -}} Copy ",
    "tags": []
  },
  {
    "id": "ab5d37a65fa1b9a1670c82ab37463592",
    "title": "csv.html",
    "description": "learn how to use the csv shortcode",
    "lastCommit": "2024-04-07 11:56:06 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/csv/",
    "relURI": "/reference/layouts/shortcodes/csv/",
    "body": "The {{\u0026lt;csv\u0026gt;}} shortcode is a simple way to embed CSV files in your documentation from a global static/csv directory. This is great for large and/or complex tables that you want to keep separate from your markdown files.\nUsing this shortcode also enables you to more easily update your CSV files programmatically, without having to update the markdown files that reference them.\nHow it Works # The {{\u0026lt;csv\u0026gt;}} shortcode accepts 3 positional args: filename, delimiter, and excludedColumns.\nfilename is the name of the CSV file you want to embed. This file should be located in the static/csv directory. It does not need to include the .csv extension. delimiter is the character that separates the columns in the CSV file. The default is ,. excludedColumns is a comma-separated list of column numbers that you want to exclude from the table. The default is an empty string. This field is case-sensitive. Examples # The table in the following examples is pulled from /static/csv/food.csv.\nFull Table with Default Delimiter # {{\u0026lt;csv food\u0026gt;}}\nItem Type Origin Apple Fruit USA Banana Fruit Ecuador Carrot Vegetable Canada Tomato Vegetable Italy Bread Grain France Cheese Dairy Switzerland Full Table with Excluded Column # {{\u0026lt;csv food \u0026quot;,\u0026quot; \u0026quot;Origin\u0026quot;\u0026gt;}}\nItem Type Apple Fruit Banana Fruit Carrot Vegetable Tomato Vegetable Bread Grain Cheese Dairy Source Code # {{$filename := .Get 0}} {{- $csv := printf \u0026#34;static/csv/%s.csv\u0026#34; $filename -}} {{- $delimiter := .Get 1 | default \u0026#34;,\u0026#34; -}} {{- $skipColumns := split (.Get 2 | default \u0026#34;\u0026#34;) \u0026#34;,\u0026#34; -}} \u0026lt;!-- Get column names to skip as a list --\u0026gt; {{- $data := getCSV $delimiter $csv -}} \u0026lt;div class=\u0026#34;overflow-x-auto\u0026#34;\u0026gt; \u0026lt;table class=\u0026#34;min-w-full divide-y divide-zinc-200\u0026#34;\u0026gt; \u0026lt;thead class=\u0026#34;\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; {{range $j, $col := index $data 0}} \u0026lt;!-- Loop through the first row to get headers --\u0026gt; {{if not (in $skipColumns $col)}} \u0026lt;!-- Check if column is not in skip list --\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34; class=\u0026#34;text-left uppercase tracking-wider\u0026#34;\u0026gt; {{$col}} \u0026lt;/th\u0026gt; {{end}} {{end}} \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody class=\u0026#34;divide-y divide-zinc-200\u0026#34;\u0026gt; {{range $i, $row := $data}} {{if gt $i 0}} \u0026lt;!-- Skip the header row --\u0026gt; \u0026lt;tr\u0026gt; {{range $j, $col := $row}} {{if not (in $skipColumns (index (index $data 0) $j))}} \u0026lt;!-- Use header row to check column name against skip list --\u0026gt; \u0026lt;td class=\u0026#34;whitespace-nowrap text-black\u0026#34;\u0026gt; {{$col}} \u0026lt;/td\u0026gt; {{end}} {{end}} \u0026lt;/tr\u0026gt; {{end}} {{end}} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "e6d189ae8c5a138e088d86df999d208b",
    "title": "include.html",
    "description": "learn how to use the literal shortcode",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/include/",
    "relURI": "/reference/layouts/shortcodes/include/",
    "body": " Inline code samples are great \u0026mdash; but code samples that are pulled from source files can be even better! This {{%include%}} shortcode is inspired by Sphinx\u0026rsquo;s .. literalinclude:: functionality.\nThis document is going to be a bit meta. How it Works # The {{%include%}} shortcode accepts 3 positional args: lang, start, and stop. All are optional.\nDon\u0026#39;t forget to use %This shortcode relies on Hugo\u0026rsquo;s markdown rendering to automatically handle code syntax highlighting. If you surround this shortcode with \u0026lt; \u0026gt; instead, it will break. Examples # This File # --- title: include.html description: learn how to use the literal shortcode --- \u0026lt;!--start --\u0026gt; Inline code samples are great --- but code samples that are pulled from source files can be even better! This `{{%/*include*/%}}` shortcode is inspired by Sphinx\u0026#39;s `.. literalinclude::` functionality. {{\u0026lt;notice snack\u0026gt;}} This document is going to be a bit meta. {{\u0026lt;/notice\u0026gt;}} ## How it Works The `{{%/*include*/%}}` shortcode accepts 3 **positional** args: `lang`, `start`, and `stop`. All are optional. {{\u0026lt;notice warning \u0026#34;Don\u0026#39;t forget to use %\u0026#34;\u0026gt;}} This shortcode relies on Hugo\u0026#39;s markdown rendering to automatically handle code syntax highlighting. If you surround this shortcode with `\u0026lt;` `\u0026gt;` instead, it will break. {{\u0026lt;/notice\u0026gt;}} ### Examples ### This File {{%include \u0026#34;reference/layouts/shortcodes/include.md\u0026#34; \u0026#34;md\u0026#34; %}} ### Python File With Comments {{%include \u0026#34;static/demo-package.py\u0026#34; \u0026#34;python\u0026#34; \u0026#34;# Start 1\u0026#34; \u0026#34;# End 1\u0026#34; %}} ## Source Code {{%include \u0026#34;layouts/shortcodes/include.html\u0026#34; \u0026#34;go\u0026#34; %}} Copy Python File With Comments # def demo_function(arg1, arg2): \u0026#34;\u0026#34;\u0026#34;Demo Function This function takes two arguments and returns their sum. Args: arg1 (int): The first argument. arg2 (int): The second argument. Returns: int: The sum of arg1 and arg2. \u0026#34;\u0026#34;\u0026#34; return arg1 + arg2 Copy Source Code # {{ $path := .Get 0 }} {{ $lang := .Get 1 | default \u0026#34;s\u0026#34; }} {{ $start := .Get 2 | default nil }} {{ $stop := .Get 3 | default nil}} {{ $content := readFile $path }} {{ $chunked := split $content \u0026#34;\\n\u0026#34; }} {{ $snippet := \u0026#34;\u0026#34; }} {{ $capture := false }} {{if eq $start nil }} {{ $capture = true }} {{end}} {{- range $chunked }} {{ if and (not $capture) (in . $start) }} {{ $capture = true }} {{ else if and $capture (in . $stop) }} {{ $capture = false }} {{ else if $capture }} {{ $snippet = print $snippet . \u0026#34;\\n\u0026#34; }} {{ end }} {{- end }} {{ printf \u0026#34;```%s\\n%s\\n```\u0026#34; $lang $snippet | safeHTML }} Copy ",
    "tags": []
  },
  {
    "id": "6099d317fae0143a5ae1fa0ee0e34161",
    "title": "notice.html",
    "description": "learn how to use the notice shortcode",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/notice/",
    "relURI": "/reference/layouts/shortcodes/notice/",
    "body": "Occasionally you might need to make admonitions, callouts, or notices in your documentation. Use the {{\u0026lt;notice\u0026gt;}} shortcode to display these.\nHow it Works # The {{\u0026lt;notice\u0026gt;}} shortcode accepts 2 positional args: type and title. Both are optional. If no type is set, the notice defaults to info.\nExamples # without typeThis is a default notice. want a cookie?This is a snack notice. you don\u0026#39;t have to add a titleThis is a tip notice. there\u0026#39;s a lot of optionsThis is a note notice. probably redundant with noteThis is a info notice. hugo is safeThis is a security notice. don\u0026#39;t use lightmode at nightThis is a warning notice. cats may destroy furnitureThis is a danger notice. {{\u0026lt; notice \u0026#34;\u0026#34; \u0026#34;without type\u0026#34; \u0026gt;}} This is a **default** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice snack \u0026#34;want a cookie?\u0026#34; \u0026gt;}} This is a **snack** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice tip \u0026#34;you don\u0026#39;t have to add a title\u0026#34;\u0026gt;}} This is a **tip** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice note \u0026#34;there\u0026#39;s a lot of options\u0026#34; \u0026gt;}} This is a **note** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice info \u0026#34;probably redundant with note\u0026#34; \u0026gt;}} This is a **info** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice security \u0026#34;hugo is safe\u0026#34; \u0026gt;}} This is a **security** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice warning \u0026#34;don\u0026#39;t use lightmode at night\u0026#34; \u0026gt;}} This is a **warning** notice. {{\u0026lt; /notice \u0026gt;}} {{\u0026lt; notice danger \u0026#34;cats may destroy furniture\u0026#34; \u0026gt;}} This is a **danger** notice. {{\u0026lt; /notice \u0026gt;}} Copy Source Code # {{ $type := .Get 0 | default \u0026#34;info\u0026#34; }} {{ $title := .Get 1 }} \u0026lt;div class=\u0026#34;notice p-4 mt-2 mb-2 rounded-md shadow-md {{- with $type }} {{if eq . \u0026#34;danger\u0026#34; }} bg-brand-7 {{else if eq . \u0026#34;warning\u0026#34; }} bg-brand-6 {{else if eq . \u0026#34;security\u0026#34; }} bg-brand-5 {{else if eq . \u0026#34;tip\u0026#34; }} bg-brand-4 {{else if eq . \u0026#34;note\u0026#34; }} bg-brand-3 {{else if eq . \u0026#34;info\u0026#34; }} bg-brand-2 {{else if eq . \u0026#34;snack\u0026#34; }} bg-brand-1 {{ end }} {{- end }} \u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-shrink-0\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/icons/notice/ {{- with $type}} {{- if eq . \u0026#34;danger\u0026#34; -}} danger {{- else if eq . \u0026#34;warning\u0026#34; -}} warning {{- else if eq . \u0026#34;security\u0026#34; -}} security {{- else if eq . \u0026#34;info\u0026#34; -}} info {{- else if eq . \u0026#34;note\u0026#34; -}} note {{- else if eq . \u0026#34;tip\u0026#34; -}} tip {{- else if eq . \u0026#34;snack\u0026#34; -}} snack {{- end -}} {{- end -}} .svg\u0026#34; class=\u0026#34;icon w-5 h-5\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ml-3 w-full text-black text-sm\u0026#34;\u0026gt; {{- if $title -}} \u0026lt;div class=\u0026#34;font-brand font-bold mb-2\u0026#34;\u0026gt;{{ $title }}\u0026lt;/div\u0026gt; {{- end -}} {{ $.Page.RenderString .Inner }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "d5e4788a4d8c3c0bc34e494573ee7577",
    "title": "pdoc.html",
    "description": "learn how to use the pdoc shortcode",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/pdoc/",
    "relURI": "/reference/layouts/shortcodes/pdoc/",
    "body": "It\u0026rsquo;s common for developers to build packages in Python that need auto-generated code documentation based off of Python strings.\nTo better support integrating that collection to your larger docs site, I\u0026rsquo;ve built out a {{\u0026lt;pdoc\u0026gt;}} shortcode that enables you to automatically target links for:\nSupermodules Submodules Functions Classes Methods How complex is the package?If you are integrating pdoc documentation for a package that has submodules, use the default pdoc shortcode. For simple packages without submodules, use pdoc-2. How it Works # The {{\u0026lt;pdoc\u0026gt;}} shortcode accepts 3 positional args: type, target, and linktitle (optional). If linktitle is not set, it automatically configures the link text as show in the following sections.\npdoc # Type (arg0) Target (arg1) Result supermodule ~pkg.super /references/pkg/super submodule ~pkg.super.sub /references/pkg/super function ~pkg.super.func /references/pkg/super/sub#package.super.sub.func class ~pkg.super.sub.class /references/pkg/super/sub#package.super.sub.class method ~pkg.super.sub.class.meth /references/pkg/super/sub#pkg.super.sub.class.meth pdoc-2 # Type (arg0) Target (arg1) Result function ~pkg.super.func_name /references/pkg.html#pkg.func class ~pkg.super.sub.class /references/pkg.html#pkg.class method ~pkg.super.sub.class.method /references/pkg.html#pkg.class.meth Examples # demo_function() DemoClass() demo_method() - {{\u0026lt; pdoc-2 \u0026#34;function\u0026#34; \u0026#34;~demo-package.demo_function\u0026#34; \u0026gt;}} - {{\u0026lt; pdoc-2 \u0026#34;class\u0026#34; \u0026#34;~demo-package.DemoClass\u0026#34; \u0026gt;}} - {{\u0026lt; pdoc-2 \u0026#34;method\u0026#34; \u0026#34;~demo-package.DemoClass.demo_method\u0026#34; \u0026gt;}} Copy Source Code # Want to change the main directory?You can change the default directory where this shortcode looks for pdoc collections by updating the value of $baseurl. Alternatively, you could make this shortcode more advanced and remove that static baseurl piece altogether. \u0026lt;!-- layouts/shortcodes/det.html --\u0026gt; {{ $type := index (.Params) 0 }} {{ $path := index (.Params) 1 }} {{ $title := index (.Params) 2}} {{ $baseurl := \u0026#34;/references/\u0026#34; }} {{ $anchor := \u0026#34;\u0026#34; }} {{ $linkText := \u0026#34;\u0026#34; }} {{ $trimmed_path := strings.TrimPrefix \u0026#34;~\u0026#34; $path }} {{ $path_parts := split $trimmed_path \u0026#34;.\u0026#34; }} {{ if eq $type \u0026#34;supermodule\u0026#34; }} {{/* url pattern for supermodule: {baseurl}/directory/supermodule/ */}} {{ $baseurl = printf \u0026#34;%s%s/%s/\u0026#34; $baseurl (index $path_parts 0) (index $path_parts 1) }} {{ $linkText = (index $path_parts 1) }} {{ else if eq $type \u0026#34;submodule\u0026#34; }} {{/* url pattern for submodule: {baseurl}/directory/supermodule/submodule.html */}} {{ $baseurl = printf \u0026#34;%s%s/%s/%s.html\u0026#34; $baseurl (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) }} {{ $linkText = printf \u0026#34;%s.%s\u0026#34; (index $path_parts 2) (index $path_parts 1) }} {{ else if eq $type \u0026#34;class\u0026#34; }} {{/* url pattern for class: {baseurl}/directory/supermodule/submodule.html#directory.supermodule.submodule.class */}} {{ $baseurl = printf \u0026#34;%s%s/%s/%s.html\u0026#34; $baseurl (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) }} {{ $anchor = printf \u0026#34;#%s.%s.%s.%s\u0026#34; (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) (index $path_parts 3) }} {{ $linkText = printf \u0026#34;%s.%s()\u0026#34; (index $path_parts 2) (index $path_parts 3) }} {{ else if eq $type \u0026#34;function\u0026#34; }} {{/* url pattern for function: {baseurl}/directory/supermodule/submodule.html#directory.supermodule.submodule.function */}} {{ $baseurl = printf \u0026#34;%s%s/%s/%s.html\u0026#34; $baseurl (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) }} {{ $anchor = printf \u0026#34;#%s.%s.%s.%s\u0026#34; (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) (index $path_parts 3) }} {{ $linkText = printf \u0026#34;%s.%s()\u0026#34; (index $path_parts 2) (index $path_parts 3) }} {{ else if eq $type \u0026#34;method\u0026#34; }} {{/* url pattern for method: {baseurl}/directory/supermodule/submodule.html#directory.supermodule.submodule.class.method */}} {{ $baseurl = printf \u0026#34;%s%s/%s/%s.html\u0026#34; $baseurl (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) }} {{ $anchor = printf \u0026#34;#%s.%s.%s.%s.%s\u0026#34; (index $path_parts 0) (index $path_parts 1) (index $path_parts 2) (index $path_parts 3) (index $path_parts 4) }} {{ $linkText = printf \u0026#34;%s.%s.%s()\u0026#34; (index $path_parts 2) (index $path_parts 3) (index $path_parts 4) }} {{else}} {{ errorf \u0026#34;The %q shortcode requires a type parameter as arg 0 (module, submodule, class, function, method). See %s\u0026#34; .Name .Position }} {{ end }} \u0026lt;a href=\u0026#34;{{ $baseurl }}{{ $anchor }}\u0026#34; class=\u0026#34;font-bold underline\u0026#34;\u0026gt;{{with $title}}{{.}}{{else}}{{ $linkText }}{{end}}\u0026lt;/a\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "81cac6afd5d0bf666c2eb3e6c88ae074",
    "title": "prod.html",
    "description": "learn how to use the prod shortcode",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/prod/",
    "relURI": "/reference/layouts/shortcodes/prod/",
    "body": "Occasionally it is useful to use a variable that represents your product name \u0026mdash; especially when documenting a project or startup product that is likely to undergo rebranding.\nHow it Works # The {{\u0026lt;prod\u0026gt;}} shortcode prints out a string for your main product name defined in your site configuration.\nOpen your repo. Navigate to the themes/milo/hugo.yaml file. Update the following: # Theme Feature Settings params: names: product: \u0026#39;Milo Docs\u0026#39; Copy Header Constraints for TOCsTo ensure Hugo resolves this shortcode correctly in the Table of Contents of your articles, make sure that you use the % wrapper instead of \u0026lt; \u0026gt; in your headers.\nExample Error Output: HAHAHUGOSHORTCOD...\nExamples # This is the MiloDocs theme.\nThis is the {{\u0026lt;prod\u0026gt;}} theme. Copy Source Code # {{- with .Site.Params.names.product}}{{.}}{{end}} Copy ",
    "tags": []
  },
  {
    "id": "b39cf67d5880a9a26a32cbf3d95e420e",
    "title": "rst.html",
    "description": "learn how to use the rst rendering shortcode",
    "lastCommit": "2024-04-16 22:49:36 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/rst/",
    "relURI": "/reference/layouts/shortcodes/rst/",
    "body": "The {{%rst%}} shortcode a tool for rendering reStructuredText content in your Hugo site. This is useful for maintaining complex information such as tables, code blocks, and other elements that are difficult to maintain in Markdown.\nBefore You Start # Create a requirements.txt file at the root of your Hugo project and add rst2html;\nBe aware that using RST in Hugo requires the rst2html5 tool to be installed on your system. You can install it using pip install docutils.\nRST is only rendered in Hugo if '^rst2html.py$' is listed in the security.exec.allow parameter in your configuration. You can see an example of this in the theme\u0026rsquo;s config details at config/_default/security.yaml.\nHow it Works # Table # {{\u0026lt;csv \u0026quot;shared/rst/table\u0026quot;\u0026gt;}}\nList Table Example Name Age Occupation Biography Alice 30 Data Scientist Alice has over 10 years of experience in data analysis and has published multiple papers on machine learning. Bob 25 Graphic Designer Bob is an award-winning graphic designer specializing in digital art and user interfaces. Charlie 45 Engineer Charlie has worked in various engineering fields, including mechanical and electrical engineering, for over 20 years. Dana 38 Physician Dana, an expert in pediatric medicine, has been practicing for 15 years and has contributed to several healthcare journals. .. list-table:: List Table Example :widths: 20 20 30 30 :header-rows: 1 * - Name - Age - Occupation - Biography * - Alice - 30 - Data Scientist - Alice has over 10 years of experience in data analysis and has published multiple papers on machine learning. * - Bob - 25 - Graphic Designer - Bob is an award-winning graphic designer specializing in digital art and user interfaces. * - Charlie - 45 - Engineer - Charlie has worked in various engineering fields, including mechanical and electrical engineering, for over 20 years. * - Dana - 38 - Physician - Dana, an expert in pediatric medicine, has been practicing for 15 years and has contributed to several healthcare journals. Copy Source Code # {{- $path := .Get 0 -}} \u0026lt;!-- Get the path from the shortcode argument --\u0026gt; {{- $content := readFile (print \u0026#34;content/\u0026#34; $path \u0026#34;.rst\u0026#34;) -}} \u0026lt;!-- Read the RST file content --\u0026gt; {{- $opts := dict \u0026#34;markup\u0026#34; \u0026#34;rst\u0026#34; -}} {{- $table := .Page.RenderString $opts $content -}} \u0026lt;!-- Render the RST content as HTML --\u0026gt; {{- $table | safeHTML -}} \u0026lt;!-- Output the HTML content --\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "b40a54faaa782c59e52f7c098cba53cd",
    "title": "tabs.html",
    "description": "learn how to use the tabs shortcode",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/tabs/",
    "relURI": "/reference/layouts/shortcodes/tabs/",
    "body": "Tabs are a great way to organize content that is contextually relevant but divergent in format or procedure (without necessarily needing its own page). This combination of shortcodes allows you to create a tabbed interface. I first encountered this implementation strategy while reading the MiniKube docs.\nHow it Works # There are 5 shortcodes that make up the tabs UX.\nshortcode description input {{\u0026lt;tabs/container\u0026gt;}} This is the container for the entire tabs UX. n/a {{\u0026lt;tabs/tabButtons\u0026gt;}} This is the container for the tab buttons. id string {{\u0026lt;tabs/tab\u0026gt;}} This is the button that will be clicked to show the tab content. option string; state string {{\u0026lt;tabs/tabContentsContainer\u0026gt;}} This is the container for the tab content. n/a {{\u0026lt;tabs/tabContent\u0026gt;}} This is the content that will be shown when the tab button is clicked. markdown Set Tab as DefaultWhen an option has the default state of active, it will be the first tab shown. Example # Console CLI Ensure your DemoTool server is running and connected. Navigate to Console. Run demoCLI connect. {{\u0026lt;tabs/container\u0026gt;}} {{\u0026lt;tabs/tabButtons id=\u0026#34;launch-method\u0026#34;\u0026gt;}} {{\u0026lt;tabs/tab option=\u0026#34;Console\u0026#34; state=\u0026#34;active\u0026#34;\u0026gt;}} {{\u0026lt;tabs/tab option=\u0026#34;CLI\u0026#34;\u0026gt;}} {{\u0026lt;/tabs/tabButtons\u0026gt;}} {{\u0026lt;tabs/tabContentsContainer\u0026gt;}} {{\u0026lt;tabs/tabContent val1=\u0026#34;launch-method/console\u0026#34;\u0026gt;}} 1. Ensure your DemoTool server is running and connected. 2. Navigate to Console. {{\u0026lt; /tabs/tabContent \u0026gt;}} {{\u0026lt; tabs/tabContent val1=\u0026#34;launch-method/cli\u0026#34; \u0026gt;}} 1. Run `demoCLI connect`. {{\u0026lt;/tabs/tabContent\u0026gt;}} {{\u0026lt;/tabs/tabContentsContainer\u0026gt;}} {{\u0026lt;/tabs/container\u0026gt;}} Copy Source Code # container tabButtons tab tabContentsContainer tabContent \u0026lt;!--tabs/container.html --\u0026gt; \u0026lt;section class=\u0026#34;bg-zinc-100 p-2 my-2 rounded-md\u0026#34; data-component=\u0026#34;tabs\u0026#34;\u0026gt; {{- .Inner -}} \u0026lt;/section\u0026gt; Copy \u0026lt;!-- tabs/tabButtons.html --\u0026gt; \u0026lt;div class=\u0026#34;flex flex-col md:flex-row ml-4 mt-2 md:space-x-4\u0026#34; data-tab-id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; | lower | urlize }}\u0026#34;\u0026gt; {{- .Inner -}} \u0026lt;/div\u0026gt; Copy \u0026lt;!--tabs/tab.html --\u0026gt; {{- $state := .Get \u0026#34;state\u0026#34; | lower -}} \u0026lt;button data-tab-option=\u0026#34;{{ .Parent.Get \u0026#34;id\u0026#34; | lower |urlize }}/{{ .Get \u0026#34;option\u0026#34; | lower | urlize }}\u0026#34; type=\u0026#34;button\u0026#34; class=\u0026#34;px-4 py-2 border rounded {{if eq $state \u0026#34;active\u0026#34;}}bg-brand text-white {{else}} bg-white text-black{{end}}\u0026#34;\u0026gt;{{ .Get \u0026#34;option\u0026#34; }}\u0026lt;/button\u0026gt; Copy \u0026lt;!-- tabs/tabContentsContainer.html --\u0026gt; \u0026lt;div class=\u0026#34;w-full p-2\u0026#34; \u0026gt; {{- .Inner -}} \u0026lt;/div\u0026gt; Copy \u0026lt;!-- tabs/tabContent.html --\u0026gt; {{- $val1 := .Get \u0026#34;val1\u0026#34; | lower -}} {{- $val2 := .Get \u0026#34;val2\u0026#34; | lower -}} {{- $val3 := .Get \u0026#34;val3\u0026#34; | lower -}} {{- $val4 := .Get \u0026#34;val4\u0026#34; | lower -}} {{- $val5 := .Get \u0026#34;val5\u0026#34; | lower -}} {{- $val6 := .Get \u0026#34;val6\u0026#34; | lower -}} {{- $val7 := .Get \u0026#34;val7\u0026#34; | lower -}} {{- $answer := $val1 -}} {{- with $val2 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val3 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val4 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val5 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val6 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} {{- with $val7 -}} {{$answer = printf \u0026#34;%s/%s\u0026#34; $answer . -}} {{- end -}} \u0026lt;div class=\u0026#34;p-2 mb-2\u0026#34; data-tabcontent=\u0026#34;{{$answer}}\u0026#34; \u0026gt; {{- $.Page.RenderString .Inner -}} \u0026lt;/div\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "3a9b605cda84a68d74370ef8dc4247a2",
    "title": "version.html",
    "description": "learn how to use the version shortcode",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "shortcodes",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/shortcodes/version/",
    "relURI": "/reference/layouts/shortcodes/version/",
    "body": "If the project you are documenting must be installed, it is likely that your documentation needs to be versioned. In this scenario, it\u0026rsquo;s especially useful to have a shortcode that can also version your download links, github links, announcements, and similar assets without having to manually update them across all of your articles.\nHow it Works # Set up a content/latest directory to begin versioning your documentation. Add the following frontmatter to content/latest/_index.md, updating the version numbers: cascade: version: isLatest: true major: 0 minor: 0 patch: 0 Copy Use the {{\u0026lt;version\u0026gt;}} shortcode to print out the collection\u0026rsquo;s versions anywhere beneath the directory. Examples # MiloDocs Theme does not actually have versioned documentation; this is just for demonstration purposes. Local Version # The default functionality for this shortcode uses the version numbers cascading from the root of the versioned directory (e.g., content/latest, content/1.0.2).\n0.0.2 is now live! 0.0.2 Download - **{{\u0026lt;version\u0026gt;}} is now live!** - [{{\u0026lt;version\u0026gt;}} Download](https://github.com/org/project/releases/tag/v{{\u0026lt;version\u0026gt;}}) Copy Global Version # In cases where you want to mention or link to the latest version in older versions of your content, you can add {{\u0026lt;version \u0026quot;global\u0026quot;\u0026gt;}}. This uses the site-wide parameter to determine what version number to use.\n\u0026lt;!-- hugo.yaml --\u0026gt; # Theme Feature Settings params: [...] version: major: 0 minor: 0 patch: 3 Copy 0.0.3 is now live! 0.0.3 Download - **{{\u0026lt;version \u0026#34;global\u0026#34;\u0026gt;}} is now live!** - [{{\u0026lt;version \u0026#34;global\u0026#34;\u0026gt;}} Download](https://github.com/org/project/releases/tag/v{{\u0026lt;version \u0026#34;global\u0026#34;\u0026gt;}}) Copy Source Code # {{- $source := index (.Params) 0 | default \u0026#34;local\u0026#34; }} {{- $major := \u0026#34;\u0026#34;}} {{- $minor := \u0026#34;\u0026#34;}} {{- $patch := \u0026#34;\u0026#34;}} {{- $value := \u0026#34;\u0026#34;}} {{- if eq $source \u0026#34;global\u0026#34; }} {{- $major = .Site.Params.Version.Major }} {{- $minor = .Site.Params.Version.Minor }} {{- $patch = .Site.Params.Version.Patch }} {{- else}} {{- $major = .Page.Params.Version.Major }} {{- $minor = .Page.Params.Version.Minor }} {{- $patch = .Page.Params.Version.Patch }} {{- end}} {{- $value = print $major \u0026#34;.\u0026#34; $minor \u0026#34;.\u0026#34; $patch }} {{- $value }} Copy ",
    "tags": []
  },
  {
    "id": "61e1288240b0c65fc5a8762ec3e98069",
    "title": "partials",
    "description": "Learn how to conditionally configure default layouts with added functionality and data.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Layouts",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/layouts/partials/",
    "relURI": "/reference/layouts/partials/",
    "body": "",
    "tags": []
  },
  {
    "id": "b06629ce1be51b7d7a0e7ea4b0de008d",
    "title": "head",
    "description": "Learn about the head partial.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "partials",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/layouts/partials/head/",
    "relURI": "/reference/layouts/partials/head/",
    "body": "The head.html partial layout houses:\nall of the metadata that needs to be generated for every article a link to the bundled \u0026amp; minified CSS (@head/css.html) a link to the bundled \u0026amp; minified JS (@head/js.html) How it Works # This partial is fed into the baseof.html default layout. Each individual page is passed through this template as context {{ partial \u0026quot;head.html\u0026quot; . }} All metadata is populated from page frontmatter. All assets are applied. Source Code # \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;title\u0026#34; content=\u0026#34;{{with .Parent}}{{.Title}}{{end}}: {{ .Title }}\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;{{with .Description}}{{.}}{{else}}{{.Summary}}{{end}}\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{{ .Keywords }}\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;{{ .Params.author }}\u0026#34; /\u0026gt; {{ if .IsHome }}{{ hugo.Generator }}{{ end }} \u0026lt;title\u0026gt;{{ if .IsHome }}{{ site.Title }}{{ else }}{{ printf \u0026#34;%s | %s\u0026#34; .Title site.Title }}{{ end }}\u0026lt;/title\u0026gt; {{ partialCached \u0026#34;head/css.html\u0026#34; . }} {{ partialCached \u0026#34;head/js.html\u0026#34; . }} Copy ",
    "tags": []
  },
  {
    "id": "be99faaf3aa41bdf87f7b7663371ff4e",
    "title": "css.html",
    "description": "Learn about the head/css partial.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "head",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/head/css/",
    "relURI": "/reference/layouts/partials/head/css/",
    "body": "This partial layout concatenates all of the modular CSS files found in themes/milo/assets/css and outputs a bundle.css file for deployment use. It also minifies and fingerprints the output.\nSource Code # {{- $cssResources := slice (resources.Get \u0026#34;css/main.css\u0026#34;) }} {{- $cssResources = $cssResources | append (resources.Get \u0026#34;css/fonts.css\u0026#34;) }} {{- if eq hugo.Environment \u0026#34;opensource\u0026#34; -}} {{- $cssResources = $cssResources | append (resources.Get \u0026#34;css/colors-opensource.css\u0026#34;) }} {{- else -}} {{- $cssResources = $cssResources | append (resources.Get \u0026#34;css/colors.css\u0026#34;) }} {{- end -}} {{- if eq hugo.Environment \u0026#34;development\u0026#34; }} {{- $cssBundle := $cssResources | resources.Concat \u0026#34;css/bundle.css\u0026#34; }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $cssBundle.RelPermalink }}\u0026#34;\u0026gt; {{- else }} {{- $opts := dict \u0026#34;minify\u0026#34; true }} {{- $cssBundle := $cssResources | resources.Concat \u0026#34;css/bundle.css\u0026#34; | minify | fingerprint }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $cssBundle.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $cssBundle.Data.Integrity }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; {{- end }} Copy ",
    "tags": []
  },
  {
    "id": "4d36702c09b588ee02dd2dea70b1f588",
    "title": "js.html",
    "description": "Learn about the head/js partial.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "head",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/head/js/",
    "relURI": "/reference/layouts/partials/head/js/",
    "body": "This partial layout concatenates all of the modular VanillaJS files found in themes/milo/assets/js and outputs a bundle.js file for deployment use. It also minifies and fingerprints the output.\nSource Code # {{- $jsResources := slice }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/main.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/chat.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/darkmode.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/search.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/chat.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/code-clipboard.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/tiles.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/tabs.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/glossary.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/toc.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/sidebar-left.js\u0026#34;) }} {{- $jsResources = $jsResources | append (resources.Get \u0026#34;js/chatTocToggle.js\u0026#34;) }} {{- if eq hugo.Environment \u0026#34;development\u0026#34; }} {{- $jsBundle := $jsResources | resources.Concat \u0026#34;js/bundle.js\u0026#34; | js.Build }} \u0026lt;script src=\u0026#34;{{ $jsBundle.RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- else }} {{- $opts := dict \u0026#34;minify\u0026#34; true }} {{- $jsBundle := $jsResources | resources.Concat \u0026#34;js/bundle.js\u0026#34; | js.Build $opts | fingerprint }} \u0026lt;script src=\u0026#34;{{ $jsBundle.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $jsBundle.Data.Integrity }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} Copy ",
    "tags": []
  },
  {
    "id": "9cf7ee50670c9f031a99ea277b0f0703",
    "title": "json.json",
    "description": "Learn about the json partial.",
    "lastCommit": "2024-04-07 13:24:01 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "partials",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/json/",
    "relURI": "/reference/layouts/partials/json/",
    "body": "Hugo supports JSON outputs out of the box. But to utilize it, you should define an output template based on the data available to your page kinds and any frontmatter included in the markdown file.\nThis partial is used in the following default layouts:\nhome.json section.json single.json Each of these outputs can be found by adding /index.json to the path of the home, section, or single page. How it Works # By itself, this partial doesn\u0026rsquo;t do anything. When piped reference from a few of our default layouts, it acts as a standardized blueprint for how each article should look like in json. Updating this file will cascade to all outputs where this is referenced.\nSource Code # { \u0026#34;id\u0026#34;: \u0026#34;{{- .File.UniqueID -}}\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;{{- if .Title}}{{- .Title }}{{else}}{{- humanize .File.TranslationBaseName -}}{{- end}}\u0026#34;, \u0026#34;description\u0026#34;:{{- with .Description}} {{. | jsonify}}{{- else }}\u0026#34;no description\u0026#34;{{- end}}, \u0026#34;lastCommit\u0026#34;: \u0026#34;{{ .GitInfo.AuthorDate }}\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;{{- if .Page.Params.version.isLatest}}latest{{else}}{{- .Page.Params.version.major }}.{{- .Page.Params.version.minor }}.{{- .Page.Params.version.patch }}{{- end}}\u0026#34;, \u0026#34;section\u0026#34;: {{- with .Section }}{{. | jsonify}} {{- else }}\u0026#34;no section\u0026#34;{{- end}}, \u0026#34;parent\u0026#34;: \u0026#34;{{with .Parent}}{{- .Title }}{{- else }}no parent{{end}}\u0026#34;, \u0026#34;isPage\u0026#34;: {{- .IsPage | jsonify }}, \u0026#34;isSection\u0026#34;: {{- .IsSection | jsonify }}, \u0026#34;pageKind\u0026#34;: {{- .Kind | jsonify }}, \u0026#34;bundleType\u0026#34;: {{- .BundleType | jsonify }}, \u0026#34;uri\u0026#34;: \u0026#34;{{- .Permalink }}\u0026#34;, \u0026#34;relURI\u0026#34;: \u0026#34;{{- .RelPermalink }}\u0026#34;, \u0026#34;body\u0026#34;: {{ .Plain | jsonify }}, {{- if .Page.Params.hidden}}\u0026#34;hidden\u0026#34;: \u0026#34;{{- .Params.hidden}}\u0026#34;,{{- end}} \u0026#34;tags\u0026#34;: [{{- range $tindex, $tag := .Params.tags }}{{- if $tindex }}, {{- end }}\u0026#34;{{- $tag| htmlEscape -}}\u0026#34;{{- end }}] } Copy ",
    "tags": []
  },
  {
    "id": "5a43f32ab16a0895018d6df35728db98",
    "title": "terms.html",
    "description": "Learn about the terms partial.",
    "lastCommit": "2024-04-07 13:24:01 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "partials",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/terms/",
    "relURI": "/reference/layouts/partials/terms/",
    "body": "",
    "hidden": "true",
    "tags": []
  },
  {
    "id": "4264e80988516a16bb1e15bf38d03492",
    "title": "footer.html",
    "description": "Learn about the footer partial.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "partials",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/footer/",
    "relURI": "/reference/layouts/partials/footer/",
    "body": "For now, I\u0026rsquo;ve left the footer as a blank slate \u0026mdash; do with it what you wish!\nHow it Works # This partial is referenced from the baseof.html default layout.\nSource Code # \u0026lt;!-- put anything you want here; it\u0026#39;s a blank slate --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/algoliasearch@latest/dist/algoliasearch-lite.umd.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "8b5ae49dfac8ad7476fdba208b3bd6be",
    "title": "article",
    "description": "Learn about the article partial layouts.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "partials",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/layouts/partials/article/",
    "relURI": "/reference/layouts/partials/article/",
    "body": " name partial refs default refs next-prev.html single.html, section.html tiles.html home.html, section.html chat.html sidebar-right.html baseof.html toc.html sidebar-right.html baseof.html ",
    "tags": []
  },
  {
    "id": "4d44da3127ce660baafed96661117f89",
    "title": "chat.html",
    "description": "Learn how to use the chat partial layout.",
    "lastCommit": "2024-04-17 21:57:38 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "article",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/article/chat/",
    "relURI": "/reference/layouts/partials/article/chat/",
    "body": " Out of DateThe steps in this article are out of date. An updated version is coming soon. Using an LLM to enhance the discoverability of your content is quickly becoming a baseline requirement for documentation. Thankfully, it\u0026rsquo;s not too hard to do thanks to Hugo\u0026rsquo;s output to JSON.\nAt a high level, you\u0026rsquo;ll need to provide some server-side code in Python or JS that routes user questions to chatGPT after being passed some embeddings (created from your docs JSON) for context.\nHow it Works # This partial sends an API request to a GCP cloud function you\u0026rsquo;ll need to set up that uses Flask (built in) to:\nSearch a Pinecone vector database filled with embeddings created from your documentation. Perform a similarity search and return the 4 most relevant chunks. Forward those chunks to the OpenAI API via LangChain to perform RAG services. Return an answer based on the question and content provided. have it your wayThere are several ways to implement a RAG LLM UX \u0026mdash; this is just the way that currently works for me. It seems like in the future people may shift from LangChain to the official Assistant API. Hopefully sharing this implementation helps you achieve yours! Set Up # To use this feature, you\u0026rsquo;re going to need to:\nSet up a Vector DB (doesn\u0026rsquo;t have to be Pinecone, LangChain supports multiple options). Convert your site index.json into embeddings and save them to the DB. Deploy a cloud function that can accept and route questions. python 3.12The tiktoken requirement runs into issues on Python 3.12; for now, I recommend using 3.10 if deploying with a GCP function. Create \u0026amp; Store Embeddings # import os from dotenv import load_dotenv from langchain.text_splitter import RecursiveCharacterTextSplitter from langchain_community.document_loaders import JSONLoader from langchain_pinecone import Pinecone as PC_Pinecone from langchain_openai import OpenAIEmbeddings from pinecone import Pinecone, ServerlessSpec, PodSpec import time from pprint import pprint load_dotenv() api_key = os.environ.get(\u0026#39;PINECONE_API_KEY\u0026#39;) openai_key = os.environ.get(\u0026#39;OPENAI_API_KEY\u0026#39;) pinecone_region = os.environ.get(\u0026#39;PINECONE_REGION\u0026#39;) pinecone_cloud = os.environ.get(\u0026#39;PINECONE_CLOUD\u0026#39;) pinecone_index = os.environ.get(\u0026#39;PINECONE_INDEX\u0026#39;) pc = Pinecone(api_key=api_key) use_serverless = True if use_serverless: spec = ServerlessSpec(cloud=pinecone_cloud, region=pinecone_region) else: spec = PodSpec() # check for and delete index if already exists index_name = pinecone_index if index_name in pc.list_indexes().names(): pc.delete_index(index_name) # we create a new index pc.create_index( index_name, dimension=1536, # dimensionality of text-embedding-ada-002 metric=\u0026#39;dotproduct\u0026#39;, spec=spec ) # wait for index to be initialized while not pc.describe_index(index_name).status[\u0026#39;ready\u0026#39;]: time.sleep(1) index = pc.Index(index_name) index.describe_index_stats() # Format and Chunk the Data embeddings = OpenAIEmbeddings(openai_api_key=openai_key) text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0,) def metadata_func(record: dict, metadata: dict) -\u0026gt; dict: metadata[\u0026#34;title\u0026#34;] = record.get(\u0026#34;title\u0026#34;) metadata[\u0026#34;relURI\u0026#34;] = record.get(\u0026#34;relURI\u0026#34;) metadata[\u0026#34;description\u0026#34;] = record.get(\u0026#34;description\u0026#34;) return metadata loader = JSONLoader( file_path=\u0026#34;./docs.json\u0026#34;, jq_schema=\u0026#34;.[]\u0026#34;, metadata_func=metadata_func, content_key=\u0026#34;body\u0026#34; ) data = loader.load() pprint(data) texts = text_splitter.split_documents(data) doc_search = PC_Pinecone.from_documents(texts, embeddings, index_name=index_name, namespace=\u0026#34;milodocs\u0026#34;) pprint(doc_search) index.describe_index_stats() Copy Deploy Cloud Function # Copy Source Code # Help WantedIf you know how to successfully separate this JS into its own file in assets/js, please submit a PR. It doesn\u0026rsquo;t work for me! \u0026lt;div id=\u0026#34;chatContainer\u0026#34; class=\u0026#34;hidden sticky top-16 h-[calc(100vh-5rem)] flex flex-col flex justify-end\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;chat-messages\u0026#34; class=\u0026#34;flex flex-col overflow-y-auto text-base\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;chat-controls\u0026#34; class=\u0026#34;flex flex-row text-xs mt-2\u0026#34;\u0026gt; \u0026lt;form id=\u0026#34;chat-form\u0026#34; class=\u0026#34;flex flex-row\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;question\u0026#34; type=\u0026#34;text\u0026#34; aria-label=\u0026#34;Question Input\u0026#34; placeholder=\u0026#34;Ask the docs\u0026#34; class=\u0026#34;h-10 border rounded-lg p-1 mr-1 focus:outline-none focus:ring-2 focus:ring-brand\u0026#34; /\u0026gt; \u0026lt;button id=\u0026#34;sendButton\u0026#34; aria-label=\u0026#34;Send\u0026#34; class=\u0026#34;flex items-center bg-brand my-1 hover:bg-black text-white p-1 mr-1 rounded-lg shadow-lg transition duration-300\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;/icons/send.svg\u0026#34; alt=\u0026#34;Send\u0026#34; class=\u0026#34;w-5 h-5\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;button id=\u0026#34;clearAll\u0026#34; aria-label=\u0026#34;Delete All\u0026#34; class=\u0026#34;flex items-center bg-black my-1 hover:bg-red-600 text-white p-1 rounded-lg shadow-lg transition duration-300\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;/icons/delete.svg\u0026#34; alt=\u0026#34;Delete\u0026#34; class=\u0026#34;w-5 h-5\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "d2d488e87d8ffcab1bdc1dd33e1facec",
    "title": "next-prev.html",
    "description": "Learn how to use the next-prev partial layout.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "article",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/article/next-prev/",
    "relURI": "/reference/layouts/partials/article/next-prev/",
    "body": "The next-prev.html partial layout defines the article progression experience and is located at the end of an article.\nHow it Works # Single pages:\nThe next article in the section is displayed on the left (next points up). The previous article in the section is displayed on the right (prev points down). Section pages:\nThe first child is displayed on the right (points down) This experience can be disabled from the themes/milo/hugo.yaml config by setting Params.articles.nextPrev.display to false. Source Code # {{- if .Site.Params.article.nextPrev.display -}} {{$trunc := .Site.Params.article.nextPrev.trunc}} \u0026lt;div class=\u0026#34;mt-8 flex justify-between items-center\u0026#34;\u0026gt; {{with .NextInSection }} \u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34; class=\u0026#34;tile text-black py-2 px-4 rounded-r-md transition duration-300\u0026#34;\u0026gt; {{.Title | truncate $trunc}} \u0026lt;/a\u0026gt; {{else}} \u0026lt;span class=\u0026#34;py-2 px-4\u0026#34;\u0026gt; \u0026lt;!-- Placeholder for alignment --\u0026gt; \u0026lt;/span\u0026gt; {{ end }} {{with .PrevInSection }} \u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34; class=\u0026#34;tile text-black py-2 px-4 rounded-l-md transition duration-300\u0026#34;\u0026gt; {{.Title | truncate $trunc}} \u0026lt;/a\u0026gt; {{else}} {{- range first 1 .Pages}} \u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34; class=\u0026#34;tile text-black py-2 px-4 rounded-l-md transition duration-300\u0026#34;\u0026gt; {{.Title | truncate $trunc}} \u0026lt;/a\u0026gt; {{- end}} {{ end }} \u0026lt;/div\u0026gt; {{- end -}} Copy ",
    "tags": []
  },
  {
    "id": "039690c1892407e9cc6ec647ea316e7f",
    "title": "tiles.html",
    "description": "Learn how to use the tiles partial layout.",
    "lastCommit": "2023-11-26 21:27:21 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "article",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/article/tiles/",
    "relURI": "/reference/layouts/partials/article/tiles/",
    "body": " How it Works # Source Code # {{if and (.Pages) (.Site.Params.article.childArticles.display)}} {{$titleTrunc := .Site.Params.article.childArticles.titleTrunc }} {{$descTrunc := .Site.Params.article.childArticles.descTrunc }} {{$count := .Site.Params.article.childArticles.count }} \u0026lt;div class=\u0026#34;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\u0026#34;\u0026gt; {{ range .Pages }} {{ if .Params.hidden }} {{/* Do not show the hidden child page or its descendants */}} {{else}} \u0026lt;div class=\u0026#34;rounded-lg shadow-md p-4 tile transition duration-300 space-y-2\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ with .Params.externalRedirect}}{{.}}{{else}}{{.RelPermalink}}{{end}}\u0026#34; class=\u0026#34;space-y-2\u0026#34;\u0026gt; {{with .Params.icon}}\u0026lt;img src=\u0026#34;/icons/light/{{.}}\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;w-5 h-5 icon\u0026#34;\u0026gt;{{end}} \u0026lt;div class=\u0026#34;text-xl text-black font-brand font-semibold\u0026#34;\u0026gt;{{if .Params.linkTitle}} {{.Params.linkTitle}} {{else}}{{ .Title | truncate $titleTrunc}}{{end}}\u0026lt;/div\u0026gt; {{ with .Description | truncate $descTrunc}} \u0026lt;p class=\u0026#34;text-zinc-900 text-sm font-brand font-thin\u0026#34;\u0026gt;{{ . }}\u0026lt;/p\u0026gt; {{ end }} \u0026lt;/a\u0026gt; {{if eq .BundleType \u0026#34;branch\u0026#34;}} \u0026lt;ul class=\u0026#34;flex flex-wrap list-none p-0\u0026#34;\u0026gt; {{ range first $count .Pages }} {{ if .Params.hidden }} {{/* Do not show the hidden child page or its descendants */}} {{else}} \u0026lt;li class=\u0026#34;my-2 mr-2\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ with .Params.externalRedirect}}{{.}}{{else}}{{.RelPermalink}}{{end}}\u0026#34; class=\u0026#34;text-xs p-2 text-black font-brand font-thin hover:text-white bg-white hover:bg-brand hover:transition hover:duration-300 rounded\u0026#34;\u0026gt; {{if eq .Parent.Title \u0026#34;Run Commands\u0026#34;}}{{ with replace .Title \u0026#34;pachctl \u0026#34; \u0026#34;\u0026#34; }}{{ . }}{{ end }}{{else}}{{if .Params.linkTitle}}{{.Params.linkTitle}}{{else}}{{ .Title | truncate 22 }}{{end}}{{end}} \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{end}} {{ end }} \u0026lt;/ul\u0026gt; {{end}} \u0026lt;/div\u0026gt; {{end}} {{ end }} \u0026lt;/div\u0026gt; {{end}} Copy ",
    "tags": []
  },
  {
    "id": "fa59468682c9266f36186ac9a1de4c01",
    "title": "toc.html",
    "description": "Learn how to use the toc partial layout.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "article",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/partials/article/toc/",
    "relURI": "/reference/layouts/partials/article/toc/",
    "body": " How it Works # Source Code # \u0026lt;div id=\u0026#34;tocContainer\u0026#34; class=\u0026#34;hidden toc sticky top-10 pt-4 h-[calc(100vh-4rem)] overflow-y-auto text-sm text-black transition duration-300\u0026#34;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "f0d6a14ec17f504cb15f9ca1f052f9c8",
    "title": "defaults",
    "description": "Learn how to apply unique article layouts for different content types.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "Layouts",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/layouts/defaults/",
    "relURI": "/reference/layouts/defaults/",
    "body": "Layouts in the _default folder define the major content types and outputs of your Hugo site.\nDefault Layouts # The following layouts are typically found in all Hugo sites and likely come with a fresh Hugo theme (hugo theme new themeName).\ntemplate description BundleType baseof.html provides a global \u0026ldquo;shell\u0026rdquo; all other templates inherit from. branch list.html renders taxonomy lists (e.g., articles with tags). branch terms.html renders taxonomy terms (e.g., tags). branch section.html renders markdown files in a directory (dir/_index.md). branch home.html renders the / page of your site; overrides content/index.md if present. leaf single.html renders single pages (e.g., articles). leaf Added Layouts # The following layouts are added by the Milo Docs theme.\ntemplate description BundleType frontmatter glossary.html renders markdown files as a stacked list in a directory (dir/_index.md). branch layout: glossary tutorial.html renders markdown files as a wizard with steps (dir/_index.md). branch layout: tutorial tutorialstep.html renders a child markdown file as a tutorial step (tutorial/step.md). leaf layout: tutStep ",
    "tags": []
  },
  {
    "id": "436bcacf379d44422c858e26d7ac2cdf",
    "title": "baseof.html",
    "description": "Learn about the baseof template for the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "defaults",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/defaults/baseof/",
    "relURI": "/reference/layouts/defaults/baseof/",
    "body": "The baseof.html template is the centralization point that glues the site theme together. All other templates defined in the theme are embedded into this one at build \u0026ndash; meaning that global logic and stylings defined here.\nSource Code # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ or site.Language.LanguageCode site.Language.Lang }}\u0026#34; dir=\u0026#34;{{ or site.Language.LanguageDirection `ltr` }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-white\u0026#34;\u0026gt; \u0026lt;header\u0026gt; {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;/header\u0026gt; {{partial \u0026#34;navigation/top.html\u0026#34;}} \u0026lt;main class=\u0026#34;max-w-screen-xl 2xl:max-w-screen-2xl mx-auto flex\u0026#34;\u0026gt; {{partial \u0026#34;navigation/sidebar-left.html\u0026#34; . }} \u0026lt;div id=\u0026#34;pageContainer\u0026#34; class=\u0026#34;w-full lg:w-3/5\u0026#34;\u0026gt; {{- if .IsHome}}{{ block \u0026#34;home\u0026#34; . }}{{ end }}{{else}}{{ block \u0026#34;main\u0026#34; . }}{{ end }}{{- end}} \u0026lt;/div\u0026gt; {{partial \u0026#34;searchResultsContainer.html\u0026#34; . }} {{partial \u0026#34;navigation/sidebar-right.html\u0026#34; . }} \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Copy ",
    "tags": []
  },
  {
    "id": "010c5afd2e57ba6d84bcfe75e0ab3867",
    "title": "glossary.html",
    "description": "Learn about the glossary page template for the theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "defaults",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/defaults/glossary/",
    "relURI": "/reference/layouts/defaults/glossary/",
    "body": "It\u0026rsquo;s common to want to build out a glossary of terms that are either unique to your product or essential to understanding the larger industry it lives in.\nCreating a glossary is an essential part of your strategy for bolstering organic inbound traffic through authoritative SEO content. How it Works # Source Code # {{ define \u0026#34;main\u0026#34; }} \u0026lt;div class=\u0026#34;flex\u0026#34;\u0026gt; {{ partial \u0026#34;navigation/glossary.html\u0026#34; . }} \u0026lt;article id=\u0026#34;article-container\u0026#34; class=\u0026#34;flex flex-col w-full hide-scrollbar mx-2\u0026#34;\u0026gt; {{ partial \u0026#34;glossary/entries.html\u0026#34; . }} \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; {{ end }} Copy It\u0026rsquo;s common to want to build out a glossary of terms that are either unique to your product or essential to understanding the larger industry it lives in.\nCreating a glossary is an essential part of your strategy for bolstering organic inbound traffic through authoritative SEO content. ",
    "tags": []
  },
  {
    "id": "8d01b73d3c064ff8e199c26a9cb4f796",
    "title": "home.html",
    "description": "Learn about the home page template for the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "defaults",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/defaults/home/",
    "relURI": "/reference/layouts/defaults/home/",
    "body": " Source Code # HTML Output # {{ define \u0026#34;home\u0026#34; }} \u0026lt;div id=\u0026#34;articleContent\u0026#34; class=\u0026#34;text-black p-4\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;p-4\u0026#34;\u0026gt; {{partial \u0026#34;article/tiles.html\u0026#34; . }} \u0026lt;/div\u0026gt; {{ end }} Copy JSON Output # [ {{- range $index, $page := .Pages }} {{- if ne $page.Type \u0026#34;json\u0026#34; }} {{- if and $index (gt $index 0) }},{{- end }} {{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34; }} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} ] {{- define \u0026#34;section\u0026#34; }} {{- range .Pages }} {{- if ne .Type \u0026#34;json\u0026#34; }} ,{{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34;}} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} {{- end }} Copy ",
    "tags": []
  },
  {
    "id": "9b1ccda4496741c5964c17a4d71ea079",
    "title": "list.html",
    "description": "Learn about the list page template for the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "defaults",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/defaults/list/",
    "relURI": "/reference/layouts/defaults/list/",
    "body": " Source Code # {{ define \u0026#34;main\u0026#34; }} \u0026lt;h1 class=\u0026#34;\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ range .Pages }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ .Summary }} {{ end }} {{ end }} Copy ",
    "tags": []
  },
  {
    "id": "3d0dd2ff71f9545e3797b90e4f6b7a64",
    "title": "section.html",
    "description": "Learn about the section page template for the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "defaults",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/defaults/section/",
    "relURI": "/reference/layouts/defaults/section/",
    "body": " Source Code # HTML Output # {{ define \u0026#34;main\u0026#34; }} \u0026lt;div class=\u0026#34;my-4\u0026#34;\u0026gt; {{partial \u0026#34;navigation/breadcrumbs.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;h1 class=\u0026#34;text-black p-4\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{if .Content}} \u0026lt;div id=\u0026#34;articleContent\u0026#34; class=\u0026#34;p-4 text-black\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; {{end}} \u0026lt;div class=\u0026#34;p-4\u0026#34;\u0026gt; {{ partial \u0026#34;article/tiles.html\u0026#34; . }} {{partial \u0026#34;article/next-prev.html\u0026#34; . }} \u0026lt;/div\u0026gt; {{ end }} Copy JSON Output # [ {{- range $index, $page := .Pages }} {{- if ne $page.Type \u0026#34;json\u0026#34; }} {{- if and $index (gt $index 0) }},{{ end }} {{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34;}} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} ] {{- define \u0026#34;section\u0026#34; }} {{- range .Pages }} {{- if ne .Type \u0026#34;json\u0026#34; }} ,{{- partial \u0026#34;json.json\u0026#34; . }} {{- end }} {{- if eq .Kind \u0026#34;section\u0026#34;}} {{- template \u0026#34;section\u0026#34; . }} {{- end }} {{- end }} {{- end }} Copy ",
    "tags": []
  },
  {
    "id": "20c095398240c091173424aee1b70918",
    "title": "single.html",
    "description": "Learn about the single page template for the Milo Docs theme.",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "reference",
    "parent": "defaults",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/layouts/defaults/single/",
    "relURI": "/reference/layouts/defaults/single/",
    "body": " Source Code # HTML Output # {{ define \u0026#34;main\u0026#34; }} \u0026lt;div class=\u0026#34;my-4\u0026#34;\u0026gt; {{partial \u0026#34;navigation/breadcrumbs.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;h1 class=\u0026#34;text-black p-4\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026#34;articleContent\u0026#34; class=\u0026#34;p-4\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;p-4\u0026#34;\u0026gt; {{partial \u0026#34;article/next-prev.html\u0026#34; . }} \u0026lt;/div\u0026gt; {{ end }} Copy JSON Output # {{- partial \u0026#34;json.json\u0026#34; .}} Copy ",
    "tags": []
  },
  {
    "id": "3006e166f7dee2b682b8ae7474fe63cc",
    "title": "Static",
    "description": "Reference static assets for advanced config or development.",
    "lastCommit": "2024-04-07 12:12:40 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "Reference",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/static/",
    "relURI": "/reference/static/",
    "body": "The static folder holds all of your assets that do not need to be processed by Hugo. This includes icons, fonts, CSV data, and more. The contents of this folder are copied as-is to the final site.\nIf you would like to turn data into an object that Hugo can manipulate, consider using the data/ folder instead.\n",
    "tags": []
  },
  {
    "id": "7ae8de3bee6772a54bdd6483f053e3ff",
    "title": "Tools",
    "description": "Reference scripts and tools for advanced config or development.",
    "lastCommit": "2024-03-30 17:28:51 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "Reference",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/reference/tools/",
    "relURI": "/reference/tools/",
    "body": "The tools directory contains a series of helper scripts that may prove useful for advanced configuration or development of a hugo site for technical documentation using the MiloDocs theme.\n",
    "tags": []
  },
  {
    "id": "c52d9bddde634bb66c62124b6764d2ab",
    "title": "build-offline-site.sh",
    "description": "Learn about how the build-offline-site.sh script works for this theme.",
    "lastCommit": "2024-04-07 13:24:01 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "Tools",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/tools/build-offline-site/",
    "relURI": "/reference/tools/build-offline-site/",
    "body": "The build-offline-site.sh script creates a compressed .tar.gz file of the site that can be used for offline viewing. This output is file:// protocol compatible and can be shared with others for offline viewing.\nBefore You Start # You should fill out the config/ directory with the appropriate configuration files for each environment if you want to use this script. Usage # sh tools/env.sh offline Copy # Runs the following: hugo server --config config/offline.yaml --environment offline Copy How it Works # For production and development environments, the script will use the default top-level hugo.yaml configuration file. For all other environments, the script will use the config/ directory to find the appropriate configuration file. Default Environments # You can set the environments by updating the the ENVIRONMENTS array in the script.\ndevelopment production offline enterprise opensource Source Code # #!/bin/bash OUTPUT_NAME=\u0026#34;offline-docs\u0026#34; # USAGE=\u0026#34;Usage: sh build-offline-site.sh [draft]\u0026#34; # This script is for building offline html file:// protocol supported documentation as a .tar.gz for customers that use air-gapped environments. # It is not intended for live hosted sites. if [ $1 = \u0026#34;draft\u0026#34; ]; then echo \u0026#34;Building Hugo site with drafts\u0026#34; hugo -D --environment development --config config/offline.yaml --minify else echo \u0026#34;Building Hugo site without drafts\u0026#34; hugo --environment development --config config/offline.yaml --minify fi tar -czvf $OUTPUT_NAME.tar.gz ./public # delete the public folder rm -rf ./public Copy ",
    "hidden": "true",
    "tags": []
  },
  {
    "id": "d751f623adfc86172af757734f457bd5",
    "title": "env.sh",
    "description": "Learn about how the env.sh works for this theme.",
    "lastCommit": "2024-04-07 13:24:01 -0400 EDT",
    "version": "latest",
    "section": "reference",
    "parent": "Tools",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/reference/tools/env/",
    "relURI": "/reference/tools/env/",
    "body": "The env.sh script makes it easy to build your site based on a specific environment (--environment) passed with the hugo build command as an argument. This script also adds some guardrails to ensure you\u0026rsquo;re using the correct configuration file for that environment.\nHugo EnvironmentsYou can use the hugo.Environment variable to access the current environment in your templates. This is useful for conditionally loading assets or content based on the environment. See the Hugo documentation for more information. Before You Start # You should fill out the config/ directory with the appropriate configuration files for each environment if you want to use this script. Usage # sh tools/env.sh offline Copy # Runs the following: hugo server --config config/offline.yaml --environment offline Copy How it Works # For production and development environments, the script will use the default top-level hugo.yaml configuration file. For all other environments, the script will use the config/ directory to find the appropriate configuration file. Default Environments # You can set the environments by updating the the ENVIRONMENTS array in the script.\ndevelopment production offline enterprise opensource Source Code # #!/bin/bash # Configurable options ENVIRONMENTS=\u0026#34;production, development, offline, enterprise, opensource\u0026#34; # Add or remove environments as needed # Usage message USAGE=\u0026#34;Usage: sh environment.sh [${ENVIRONMENTS}]\u0026#34; # Check if an argument is provided if [ $# -eq 0 ]; then echo \u0026#34;No environment specified. Only use this command to start the hugo server with a specific config/{environment}.yaml file.\u0026#34; echo \u0026#34;-- ${USAGE}\u0026#34; echo \u0026#34;-- To build all documentation, use the standard hugo cli commands (hugo, hugo server) and top-level hugo.yaml file\u0026#34; exit 1 fi # Check if the provided argument is a valid environment if ! [[ \u0026#34;${ENVIRONMENTS}\u0026#34; =~ (^|[[:space:],])\u0026#34;$1\u0026#34;($|[[:space:],]) ]]; then echo \u0026#34;Invalid environment specified.\u0026#34; echo \u0026#34;-- ${USAGE}\u0026#34; exit 1 fi # If $1 is all or ALL, do not set the HUGO_ORG environment variable if [[ $1 == \u0026#34;all\u0026#34; ]] || [[ $1 == \u0026#34;ALL\u0026#34; ]]; then echo \u0026#34;Starting Hugo server for all Docs\u0026#34; hugo server exit 0 elif [[ $1 == \u0026#34;offline\u0026#34; ]]; then echo \u0026#34;Starting Hugo server for offline Docs\u0026#34; hugo server --config config/offline.yaml --environment offline exit 0 elif [[ $1 == \u0026#34;enterprise\u0026#34; ]]; then echo \u0026#34;Starting Hugo server for enterprise Docs\u0026#34; hugo server --config config/enterprise.yaml --environment enterprise exit 0 elif [[ $1 == \u0026#34;opensource\u0026#34; ]]; then echo \u0026#34;Starting Hugo server for opensource Docs\u0026#34; hugo server --config config/open-source.yaml --environment opensource exit 0 elif [[ $1 == \u0026#34;production\u0026#34; ]]; then echo \u0026#34;Starting Hugo server for production Docs\u0026#34; hugo server --environment production exit 0 elif [[ $1 == \u0026#34;development\u0026#34; ]]; then echo \u0026#34;Starting Hugo server for development Docs\u0026#34; hugo server --environment development exit 0 else # Set the HUGO_ORG environment variable for other valid environments export HUGO_PRODUCT=$1 export HUGO_TITLE=\u0026#34;$1 Docs\u0026#34; echo \u0026#34;Starting Hugo server for $HUGO_PRODUCT Docs\u0026#34; hugo server fi Copy ",
    "hidden": "true",
    "tags": []
  },
  {
    "id": "502b26bf8b307ac38ebd0b3d7a26c333",
    "title": "Index",
    "description": "no description",
    "lastCommit": "2024-01-26 12:38:28 -0500 EST",
    "version": "latest",
    "section": "references",
    "parent": "Milo Theme Docs",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/references/",
    "relURI": "/references/",
    "body": "",
    "hidden": "true",
    "tags": []
  },
  {
    "id": "4f15952453ee3f0cb717ff2904818fc7",
    "title": "Demo package",
    "description": "no description",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "references",
    "parent": "",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/references/demo-package/",
    "relURI": "/references/demo-package/",
    "body": "\u003c!doctype html\u003e demo-package API documentation Module demo-package Demo Supermodule\nThis is the supermodule of the demo package.\nExpand source code \u0026#34;\u0026#34;\u0026#34;Demo Supermodule This is the supermodule of the demo package. \u0026#34;\u0026#34;\u0026#34; def demo_function(arg1, arg2): \u0026#34;\u0026#34;\u0026#34;Demo Function This function takes two arguments and returns their sum. Args: arg1 (int): The first argument. arg2 (int): The second argument. Returns: int: The sum of arg1 and arg2. \u0026#34;\u0026#34;\u0026#34; return arg1 + arg2 class DemoClass: \u0026#34;\u0026#34;\u0026#34;Demo Class This is a demo class with a single method. \u0026#34;\u0026#34;\u0026#34; def __init__(self, value): \u0026#34;\u0026#34;\u0026#34;Constructor Initializes an instance of DemoClass with a value. Args: value (int): The initial value. \u0026#34;\u0026#34;\u0026#34; self.value = value def demo_method(self, increment): \u0026#34;\u0026#34;\u0026#34;Demo Method This method increments the value of the instance. Args: increment (int): The amount to increment the value by. \u0026#34;\u0026#34;\u0026#34; self.value += increment def demo_submodule_function(): \u0026#34;\u0026#34;\u0026#34;Demo Submodule Function This is a function defined in the submodule of the demo package. It does not take any arguments and does not return anything. \u0026#34;\u0026#34;\u0026#34; pass Functions def demo_function(arg1, arg2) Demo Function\nThis function takes two arguments and returns their sum.\nArgs arg1 :\u0026ensp;int The first argument. arg2 :\u0026ensp;int The second argument. Returns int The sum of arg1 and arg2. Expand source code def demo_function(arg1, arg2): \u0026#34;\u0026#34;\u0026#34;Demo Function This function takes two arguments and returns their sum. Args: arg1 (int): The first argument. arg2 (int): The second argument. Returns: int: The sum of arg1 and arg2. \u0026#34;\u0026#34;\u0026#34; return arg1 + arg2 def demo_submodule_function() Demo Submodule Function\nThis is a function defined in the submodule of the demo package. It does not take any arguments and does not return anything.\nExpand source code def demo_submodule_function(): \u0026#34;\u0026#34;\u0026#34;Demo Submodule Function This is a function defined in the submodule of the demo package. It does not take any arguments and does not return anything. \u0026#34;\u0026#34;\u0026#34; pass Classes class DemoClass (value) Demo Class\nThis is a demo class with a single method.\nConstructor\nInitializes an instance of DemoClass with a value.\nArgs value :\u0026ensp;int The initial value. Expand source code class DemoClass: \u0026#34;\u0026#34;\u0026#34;Demo Class This is a demo class with a single method. \u0026#34;\u0026#34;\u0026#34; def __init__(self, value): \u0026#34;\u0026#34;\u0026#34;Constructor Initializes an instance of DemoClass with a value. Args: value (int): The initial value. \u0026#34;\u0026#34;\u0026#34; self.value = value def demo_method(self, increment): \u0026#34;\u0026#34;\u0026#34;Demo Method This method increments the value of the instance. Args: increment (int): The amount to increment the value by. \u0026#34;\u0026#34;\u0026#34; self.value += increment Methods def demo_method(self, increment) Demo Method\nThis method increments the value of the instance.\nArgs increment :\u0026ensp;int The amount to increment the value by. Expand source code def demo_method(self, increment): \u0026#34;\u0026#34;\u0026#34;Demo Method This method increments the value of the instance. Args: increment (int): The amount to increment the value by. \u0026#34;\u0026#34;\u0026#34; self.value += increment Index Functions demo_function demo_submodule_function Classes DemoClass demo_method Generated by pdoc 0.10.0.\n",
    "tags": []
  },
  {
    "id": "d657426012660c27abf5780cb9ebf137",
    "title": "Example API (TESTING)",
    "description": "no description",
    "lastCommit": "2024-04-01 20:12:29 -0400 EDT",
    "version": "latest",
    "section": "references",
    "parent": "",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/references/api/basic/",
    "relURI": "/references/api/basic/",
    "body": "",
    "tags": []
  },
  {
    "id": "040b713de49d748fc600c2955aec83fb",
    "title": "Index",
    "description": "no description",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "shared",
    "parent": "Milo Theme Docs",
    "isPage": false,
    "isSection": true,
    "pageKind": "section",
    "bundleType": "branch",
    "uri": "//localhost:1313/shared/",
    "relURI": "/shared/",
    "body": "",
    "hidden": "true",
    "tags": []
  },
  {
    "id": "e153cab03b176dc1b3b19ef37908fa75",
    "title": "Admonitions",
    "description": "no description",
    "lastCommit": "2024-04-15 11:37:35 -0400 EDT",
    "version": "latest",
    "section": "shared",
    "parent": "",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/shared/rst/admonitions/",
    "relURI": "/shared/rst/admonitions/",
    "body": " Note\nThis is a note. It can contain more than one line, wrapping as needed. It's used to highlight important information that isn't necessarily critical.\nWarning\nThis is a warning. It should be used to alert the reader about potential harmful situations.\nTip\nThis is a tip. Useful hints or advice can be given here to help the reader solve problems.\nCaution!\nThis is a caution. It is stronger than a note but not as strong as a warning. It's used to advise against certain actions.\n",
    "tags": []
  },
  {
    "id": "2fe20f7d8073e78ac2fa8efc2a7a4a1d",
    "title": "Table",
    "description": "no description",
    "lastCommit": "2024-04-15 11:37:35 -0400 EDT",
    "version": "latest",
    "section": "shared",
    "parent": "",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/shared/rst/table/",
    "relURI": "/shared/rst/table/",
    "body": " List Table Example Name Age Occupation Biography Alice 30 Data Scientist Alice has over 10 years of experience in data analysis and has published multiple papers on machine learning. Bob 25 Graphic Designer Bob is an award-winning graphic designer specializing in digital art and user interfaces. Charlie 45 Engineer Charlie has worked in various engineering fields, including mechanical and electrical engineering, for over 20 years. Dana 38 Physician Dana, an expert in pediatric medicine, has been practicing for 15 years and has contributed to several healthcare journals. ",
    "tags": []
  },
  {
    "id": "bf6ed7cdae0a9028979565cbf77933b6",
    "title": "blah",
    "description": "blah blah",
    "lastCommit": "2023-11-26 15:46:38 -0500 EST",
    "version": "latest",
    "section": "shared",
    "parent": "",
    "isPage": true,
    "isSection": false,
    "pageKind": "page",
    "bundleType": "",
    "uri": "//localhost:1313/shared/readfile/",
    "relURI": "/shared/readfile/",
    "body": " This is an embedded section # tes test test.\n",
    "tags": []
  }
]
